
import lib.cli as cli
import logging

from cliff.app import App
from cliff.commandmanager import CommandManager
from lib.config import GlobalConfig
from lib.db.api import DbApi


CFG = GlobalConfig()


class CVETrackerCommandManager(CommandManager):
    SHELL_COMMANDS = {
        'import advisory': cli.CliImportAdvisory,
        'import package': cli.CliImportPackage,
        'list cve': cli.CliListCve,
        'list package': cli.CliListPackage,
        'list product': cli.CliListProduct,
        'show cve': cli.CliShowCve,
        'show package': cli.CliShowPackage,
    }

    def load_commands(self, namespace):
        for name, cmd_class in self.SHELL_COMMANDS.items():
            self.add_command(name, cmd_class)


class CVETrackerApp(App):
    def __init__(self):
        super(CVETrackerApp, self).__init__(
            description='CVE Tracker App',
            version='0.1',
            command_manager=CVETrackerCommandManager(None),
            deferred_help=True,
        )

    def initialize_app(self, argv):
        api = DbApi()
        api.initialize()

    def prepare_to_run_command(self, cmd):
        self.LOG.debug("prepare_to_run_command '{}'".format(
            cmd.__class__.__name__))

    def clean_up(self, cmd, result, err):
        self.LOG.debug("clean_up '{}'".format(cmd.__class__.__name__))

    def configure_logging(self):
        self.LOG_FILE_MESSAGE_FORMAT = \
            '%(asctime)s (%(name)s) [%(levelname)s] %(message)s'

        # self.CONSOLE_MESSAGE_FORMAT = \
        #     '%(levelname)s %(message)s'

        super(CVETrackerApp, self).configure_logging()

        sqlalchemy_logger = logging.getLogger('sqlalchemy.engine')

        if self.options.debug:
            sqlalchemy_logger.setLevel(logging.DEBUG)
        else:
            sqlalchemy_logger.setLevel(logging.ERROR)

