
import lib.cli as cli
import logging

from cliff.app import App
from cliff.commandmanager import CommandManager
from lib.db.api import DBAPI
from lib.config import CONFIG


class CVETrackerCommandManager(CommandManager):
    SHELL_COMMANDS = {
        'export cve': cli.CliExportCve,
        'export source-package': cli.CliExportSourcePackage,
        'export html': cli.CliExportHtml,
        'import advisory': cli.CliImportAdvisory,
        'import package': cli.CliImportPackage,
        'list advisory': cli.CliListAdvisory,
        'list cve': cli.CliListCve,
        'list project': cli.CliListProject,
        'list package': cli.CliListPackage,
        'list dist-package': cli.CliListDistributionPackage,
        'list source-package': cli.CliListSourcePackage,
        'list product': cli.CliListProduct,
        'list product-package': cli.CliListProductPackage,
        'list distribution': cli.CliListDistribution,
        'show advisory': cli.CliShowAdvisory,
        'show cve': cli.CliShowCve,
        'show package': cli.CliShowPackage,
        'show source-package': cli.CliShowSourcePackage,
        'show distribution': cli.CliShowDistribution,
        'show project': cli.CliShowProject,
        'show product': cli.CliShowProduct,
        'show dist-package': cli.CliShowDistributionPackage,
        'show product-package': cli.CliShowProductPackage,
        'scan projects': cli.CliScanProjects,
        'update cve-status': cli.CliUpdateCveStatus,
        'update dist-package': cli.CliUpdateDistributionPackage,
        'update product-package': cli.CliUpdateProductPackage,
        'init db': cli.CliInitDb,
        'scan dist-package': cli.CliScanDistributionPackage,
        'report unresolved-cve': cli.CliReportUnresolvedCve,
    }

    def load_commands(self, namespace):
        for name, cmd_class in self.SHELL_COMMANDS.items():
            self.add_command(name, cmd_class)


class CVETrackerApp(App):
    def __init__(self):
        super(CVETrackerApp, self).__init__(
            description='CVE Tracker App',
            version='0.1',
            command_manager=CVETrackerCommandManager(None),
            deferred_help=True,
        )

    def initialize_app(self, argv):
        CONFIG.load('config.ini')
        if '--without-database' in argv:
            argv.remove('--without-database')
            self.LOG.info('Skipping database initialization')
        else:
            DBAPI.initialize()

    def prepare_to_run_command(self, cmd):
        self.LOG.debug("prepare_to_run_command '{}'".format(
            cmd.__class__.__name__))

    def clean_up(self, cmd, result, err):
        self.LOG.debug("clean_up '{}'".format(cmd.__class__.__name__))

    def configure_logging(self):
        self.LOG_FILE_MESSAGE_FORMAT = \
            '%(asctime)s (%(name)s) [%(levelname)s] %(message)s'

        if self.options.debug:
            self.CONSOLE_MESSAGE_FORMAT = \
                '%(asctime)s (%(name)s) [%(levelname)s] %(message)s'

        super(CVETrackerApp, self).configure_logging()

        sqlalchemy_logger = logging.getLogger('sqlalchemy.engine')

        if self.options.verbose_level > 2:
            sqlalchemy_logger.setLevel(logging.DEBUG)
        else:
            sqlalchemy_logger.setLevel(logging.ERROR)
