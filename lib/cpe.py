
from enum import Enum

import re
import cpe as pycpe

re_escape = re.compile(r'\\(\\)')
re_escaped = re.compile(
    r'\\([\!\"\#\$\%\&\'\(\)\+\,\.\/\:\;\<\=\>\@\[\]\^\`\{\|\}\~])')
re_fs_unescaped = re.compile(
    r'(?<!\\)([\!\"\#\$\%\&\'\(\)\+\,\/\:\;\<\=\>\@\[\]\^\`\{\|\}\~])')
re_wfn_unescaped = re.compile(
    r'(?<!\\)([\!\"\#\$\%\&\'\(\)\+\.\,\/\:\;\<\=\>\@\[\]\^\`\{\|\}\~])')
re_unescaped_colon = re.compile(r'(?<!\\)\:')
re_uri_string = re.compile(r'^cpe\:\/[aho]')
re_fs_string = re.compile(r'^cpe\:(\d+\.\d+)\:[aho]')
re_quoted = re.compile(r'%([A-Fa-f0-9]{2})')


class WfnPartType(Enum):
    STRING = 0
    ANY = 1
    NA = 2


class WfnPart(object):
    def __init__(self, value=None):
        self._type, self._value = {
            None: (WfnPartType.ANY, None),
            '*': (WfnPartType.ANY, None),
            '-': (WfnPartType.NA, None),
        }.get(value, (WfnPartType.STRING, value))

        if self._value:
            self._value = self.unescape(self._value)

    def __str__(self):
        return {
            WfnPartType.ANY: '*',
            WfnPartType.NA: '-',
            WfnPartType.STRING: self._value
        }.get(self._type)

    @classmethod
    def unescape(cls, string):
        s, x = re_escape.subn(r'\1', string)
        while x > 0:
            s = re_escaped.sub(r'\1', s)
            s, x = re_escape.subn(r'\1', s)
        s = re_escaped.sub(r'\1', s)
        return s

    def as_uri(self):
        raise Exception('Not implemented')

    def as_fs(self):
        return {
            WfnPartType.ANY: '*',
            WfnPartType.NA: '-',
            WfnPartType.STRING: re_fs_unescaped.sub(r'\\\1', self._value)
        }.get(self._type)

    def as_wfn(self):
        return {
            WfnPartType.ANY: 'ANY',
            WfnPartType.NA: 'NA',
            WfnPartType.STRING: re_wfn_unescaped.sub(r'\\\1', self._value)
        }.get(self._type)

    @property
    def is_any(self):
        return self._type == WfnPartType.ANY

    @property
    def is_na(self):
        return self._type == WfnPartType.NA

    @property
    def is_string(self):
        return self._type == WfnPartType.STRING


class CpeWFN(object):
    WFN_KEYS = ('part', 'vendor', 'product', 'version', 'update', 'edition',
                'language', 'sw_edition', 'target_sw', 'target_hw', 'other')

    def __init__(self, cpe_string=None):
        self._wfn = dict()

        if cpe_string:
            if re_uri_string.match(cpe_string):
                self._default_type = 'URI'
                self._unbind_uri(cpe_string)
            elif re_fs_string.match(cpe_string):
                self._default_type = 'FS'
                self._unbind_fs(cpe_string)
            else:
                raise Exception('Not a CPE string')

    def _split(self, string):
        return re_unescaped_colon.split(string)

    def _unbind_uri(self, string):
        raise Exception("CPE URI not supported.")

    def _unbind_fs(self, string):
        parts = list(map(WfnPart, self._split(string)))
        self._wfn.update(dict(zip(self.WFN_KEYS, parts[2:])))

    def get(self, name):
        return self._wfn.get(name, WfnPart())

    def set(self, name, value):
        if value is None:
            if name in self._wfn:
                del self._wfn[name]
        else:
            self._wfn[name] = WfnPart(value)

    def unquote(self, string):
        return re_quoted.sub(lambda m: chr(int(m.group(1), 16)), string)

    def cpe(self):
        return pycpe.CPE(self.bind_to_fs())

    def bind_to_uri(self):
        return ':'.join(map(lambda x: x.bind_to_uri, self._wfn))

    def bind_to_fs(self):
        parts = ['cpe', '2.3']
        for key in self.WFN_KEYS:
            parts.append(self.get(key).as_fs())

        return ':'.join(parts)

    def __str__(self):
        keys = ('part', 'vendor', 'product', 'version', 'update', 'edition',
                'language', 'sw_edition', 'target_sw', 'target_hw', 'other')
        parts = []
        for x in self.WFN_KEYS:
            if x in self._wfn:
                parts.append('{}="{}"'.format(x, self.get(x)))
        return 'wfn:[{}]'.format(','.join(parts))

    def bind_to_wfn(self):
        raise Exception("Not implemented")
