
import logging
import os

from git import Repo


class GitRepo(object):
    log = logging.getLogger(__name__)

    def __init__(self, repo=None):
        self._ = repo

    @classmethod
    def import_project(cls, project, store_prefix, git_prefix, fetch=True):
        target_path = os.path.join(store_prefix, project)
        os.makedirs(target_path, exist_ok=True)
        if not os.path.exists(os.path.join(target_path, '.git')):
            repo = cls(Repo.init(target_path))
            origin = repo.remote('origin', git_prefix + '/' + project)
            fetch = True
        else:
            repo = cls(Repo(target_path))
            origin = repo.remote('origin')

        repo.log.info("Importing '{}' to '{}' ...".format(project, target_path))
        if fetch:
            origin.fetch()

        repo.checkout('master')

        repo.log.info("Import done")
        return repo

    def remote(self, name, url=None):
        remote = getattr(self._.remotes, name, None)
        if remote is None:
            remote = self._.create_remote(name, url)

        return remote

    def deep_clean(self):
        self.log.info("Performing deep repo clean ...")
        git = self._.git
        git.clean('-f', '-d', '-x')
        first_commit = git.rev_list('--max-parents=0', 'HEAD').split('\n')[0]
        git.reset('--hard', first_commit)
        git.checkout('master')
        git.pull()

    def checkout(self, branch='master'):
        if self._.is_dirty():
            self.deep_clean()

        if branch in self._.heads:
            self._.heads[branch].checkout()
        else:
            origin = self._.remotes.origin
            if branch not in origin.refs:
                origin.fetch()
            self._.create_head(branch, origin.refs[branch])\
                .set_tracking_branch(origin.refs[branch]).checkout()
            self._.git.pull()
