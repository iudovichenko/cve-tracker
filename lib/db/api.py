
import logging

from lib.config import CONFIG
from lib.db.models import *

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker


class DBAPI(object):
    log = logging.getLogger(__name__)

    MODELS_WITH_PROPERTIES = [
        'Advisory',
        'CVE',
        'Distribution',
        'Release',
        'SourcePackage',
        'ProductDistributionPackage',
        'SourcePackageDistribution',
    ]

    @property
    def session(self):
        return CONFIG.session

    @classmethod
    def initialize(cls):
        if CONFIG.session is None:
            engine = create_engine(CONFIG.config['database']['uri'])
            Base.metadata.create_all(engine)
            Session = sessionmaker(bind=engine)
            CONFIG.session = Session()

    def get(self, cls, *args, **kwargs):
        if len(args):
            raise Exception("Positional args are not allowed.")
        q = self.session.query(cls).filter_by(**kwargs)
        obj = q.one_or_none()
        if obj is None:
            obj = cls(**kwargs)
            self.session.add(obj)
        return obj

    def find(self,  *args, **kwargs):
        _args = list(args)
        cls = _args.pop(0)
        alias = kwargs.pop('alias', None)
        cls_name = cls.__class__.__name__
        if alias:
            if cls_name in self.MODELS_WITH_PROPERTIES:
                cls = eval(cls_name + 'Property')
            elif cls_name.endswith('Property'):
                cls = self
            else:
                raise Exception("Can't use alias with class '{}'"
                                .format(cls_name))

            res = CONFIG.session.query(cls).filter(cls.name == alias).all()
            return [x.parent for x in res]

        query = CONFIG.session.query(self)
        for name, value in kwargs.items():
            query = query.filter(getattr(self, name) == value)

        return query.all()

    def add_property(self, obj, name, value, unique=False):
        cls_name = type(obj).__name__
        # cls_name = obj.__class__.__name__
        self.log.debug(dir(obj))
        property_cls = eval(cls_name + 'Property')

        if unique:
            prop = self.get(property_cls, parent_id=obj.id,
                            name=name)
            if isinstance(prop, list):
                raise Exception("Multiple properties found but not allowed.")
            prop.value = value
        else:
            prop = self.get(property_cls, parent_id=obj.id,
                            name=name, value=value)

        obj.properties.add(prop)

    def query(self, *args, **kwargs):
        _args = {'adapter': None}
        _args.update(dict(zip(('cls', 'adapter'), args)))

        cls = _args['cls']
        adapter = _args['adapter']

        query = self.session.query(cls)
        for name, value in kwargs.items():
            query = query.filter(getattr(cls, name) == value)

        if adapter:
            for obj in query.all():
                yield adapter(obj)
        else:
            for obj in query.all():
                yield obj
