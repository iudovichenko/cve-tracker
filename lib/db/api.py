
import logging

from lib.config import GlobalConfig
from lib.db.models import *

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

CFG = GlobalConfig()


class DbApi(object):
    log = logging.getLogger(__name__)

    MODELS_WITH_PROPERTIES = [
        'Advisory',
        'CVE',
        'Distribution',
        'Release',
        'SourcePackage',
        'ProductDistributionPackage',
        'SourcePackageDistribution',
    ]

    @property
    def session(self):
        return CFG.session

    def initialize(self):
        engine = create_engine(CFG.config.db_uri)
        Session = sessionmaker(bind=engine)
        CFG.session = Session()
        Base.metadata.create_all(engine)

    def get(self, *args, **kwargs):
        _args = list(args)
        cls = _args.pop(0)

        attrs = getattr(cls, '__pos_attrs__', [])
        defaults = getattr(cls, '__pos_defaults__', {})
        kwargs.update(dict(zip(attrs, _args)))
        session = kwargs.pop('session', self.session)
        for key, value in defaults.items():
            kwargs.setdefault(key, value)
        q = session.query(cls)
        for key, value in kwargs.items():
            q = q.filter(getattr(cls, key) == value)
        # for attr in attrs:
        #     if attr in kwargs:
        #         q = q.filter(getattr(cls, attr) == kwargs[attr])

        r = q.all()
        if len(r) > 1:
            return r
        elif len(r) == 1:
            return r[0]

        obj = cls(**kwargs)
        self.session.add(obj)
        return obj

    def find(self,  *args, **kwargs):
        _args = list(args)
        cls = _args.pop(0)
        alias = kwargs.pop('alias', None)
        cls_name = cls.__class__.__name__
        if alias:
            if cls_name in self.MODELS_WITH_PROPERTIES:
                cls = eval(cls_name + 'Property')
            elif cls_name.endswith('Property'):
                cls = self
            else:
                raise Exception("Can't use alias with class '{}'"
                                .format(cls_name))

            res = CFG.session.query(cls).filter(cls.name == alias).all()
            return [x.parent for x in res]

        query = CFG.session.query(self)
        for name, value in kwargs.items():
            query = query.filter(getattr(self, name) == value)

        return query.all()

    def add_property(self, obj, name, value, unique=False):
        cls_name = obj.__class__.__name__
        property_cls = eval(cls_name + 'Property')

        if unique:
            prop = self.get(property_cls, obj.id, name)
            if isinstance(prop, list):
                raise Exception("Multiple properties found but not allowed.")
            prop.value = value
        else:
            prop = self.get(property_cls, obj.id, name, value)

        if prop not in obj.properties:
            obj.properties.append(prop)
