from sqlalchemy import Column, ForeignKey, UniqueConstraint
from sqlalchemy import Integer, String
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class InitPropertyMixin(object):
    def __init__(self, *args, **kwargs):
        attrs = ['name', 'value']
        kwargs.update(dict(zip(attrs, args)))
        self.name = kwargs['name']
        self.value = kwargs['value']


class Advisory(Base):
    __tablename__ = 'advisory'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    subject = Column(String(255))
    url = Column(String(255))

    properties = relationship('AdvisoryProperty',
                              back_populates='parent')

    cves = relationship('AdvisoryCVE',
                        back_populates='advisory')

    source_packages = relationship('AdvisorySourcePackage',
                                   back_populates='advisory')


class AdvisoryProperty(Base, InitPropertyMixin):
    __tablename__ = 'advisory_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('advisory.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('Advisory',
                          back_populates='properties')


class CVE(Base):
    __tablename__ = 'cve'
    __pos_attrs__ = ['name',]

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    subject = Column(String(255))

    properties = relationship('CVEProperty',
                              back_populates='parent')

    source_packages = relationship('SourcePackageCVE',
                                   back_populates='cve')

    advisories = relationship('AdvisoryCVE',
                               back_populates='cve')


class CVEProperty(Base, InitPropertyMixin):
    __tablename__ = 'cve_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('cve.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('CVE',
                          back_populates='properties')


class Distribution(Base):
    __tablename__ = 'distribution'
    __pos_attrs__ = ['name', 'version', 'arch']
    __pos_defaults__ = {'arch': 'x86_64'}

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    version = Column(String(255))
    arch = Column(String(255))

    __table_args__ = ((UniqueConstraint('name', 'version', 'arch'), ))

    properties = relationship('DistributionProperty',
                              back_populates='parent')

    packages = relationship('SourcePackageDistribution',
                            back_populates='distribution')


class DistributionProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('distribution.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('Distribution',
                          back_populates='properties')


class Release(Base):
    __tablename__ = 'release'
    __pos_attrs__ = ['name', 'version']

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    version = Column(String(255))

    properties = relationship('ReleaseProperty',
                              back_populates='parent')


class ReleaseProperty(Base, InitPropertyMixin):
    __tablename__ = 'release_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('release.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('Release',
                           back_populates='properties')


class SourcePackage(Base):
    __tablename__ = 'source_package'
    __pos_attrs__ = ['name', 'version']

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    version = Column(String(255))

    properties = relationship('SourcePackageProperty',
                              back_populates='parent')

    cves = relationship('SourcePackageCVE',
                        back_populates='source_package')

    distributions = relationship('SourcePackageDistribution',
                                 back_populates='source_package')

    advisories = relationship('AdvisorySourcePackage',
                              back_populates='source_package')

    def add_distribution(self, distribution):
        self.distributions.append(
            SourcePackageDistribution(
                source_package=self,
                distribution=distribution
            )
        )

    # def add_property(self, name, value):
    #     prop = SourcePackageProperty.get(self.id, name, value)
    #     if prop not in self.properties:
    #         self.properties.append(prop)


class SourcePackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'source_package_properties'
    __pos_attrs__ = ['parent_id', 'name', 'value']

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('source_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('SourcePackage',
                           back_populates='properties')


class SourcePackageCVE(Base):
    __tablename__ = 'source_package__cve'
    __pos_attrs__ = ['source_package', 'cve']

    cve_id = Column(Integer, ForeignKey('cve.id'), primary_key=True)
    package_id = Column(Integer, ForeignKey('source_package.id'),
                        primary_key=True)
    status = Column(String(255))

    source_package = relationship('SourcePackage',
                                  back_populates='cves')

    cve = relationship('CVE',
                       back_populates='source_packages')


class AdvisoryCVE(Base):
    __tablename__ = 'advisory__cve'
    __pos_attrs__ = ['advisory', 'cve']

    cve_id = Column(Integer, ForeignKey('cve.id'),
                    primary_key=True)

    advisory_id = Column(Integer, ForeignKey('advisory.id'),
                         primary_key=True)

    advisory = relationship('Advisory',
                            back_populates='cves')

    cve = relationship('CVE',
                       back_populates='advisories')


class AdvisorySourcePackage(Base):
    __tablename__ = 'advisory__source_package'
    __pos_attrs__ = ['advisory', 'source_package']

    advisory_id = Column(Integer, ForeignKey('advisory.id'),
                         primary_key=True)

    package_id = Column(Integer, ForeignKey('source_package.id'),
                        primary_key=True)

    advisory = relationship('Advisory',
                            back_populates='source_packages')

    source_package = relationship('SourcePackage',
                                  back_populates='advisories')


class SourcePackageDistribution(Base):
    __tablename__ = 'source_package__distribution'
    __pos_attrs__ = ['source_package', 'distribution']

    package_id = Column(Integer, ForeignKey('source_package.id'),
                        primary_key=True)

    distribution_id = Column(Integer, ForeignKey('distribution.id'),
                             primary_key=True)

    distribution = relationship('Distribution',
                                 back_populates='packages')

    source_package = relationship('SourcePackage',
                                  back_populates='distributions')


