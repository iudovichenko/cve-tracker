import uuid

from sqlalchemy import Table, Column, ForeignKey, UniqueConstraint
from sqlalchemy import Integer, String
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


advisory__cve = Table(
    'advisory__cve',
    Base.metadata,
    Column('advisory_id', Integer, ForeignKey('advisory.id')),
    Column('cve_id', Integer, ForeignKey('cve.id'))
)


advisory__source_package = Table(
    'advisory__source_package',
    Base.metadata,
    Column('advisory_id', Integer, ForeignKey('advisory.id')),
    Column('package_id', Integer, ForeignKey('source_package.id'))
)


advisory__distribution_package = Table(
    'advisory__distribution_package',
    Base.metadata,
    Column('advisory_id', Integer, ForeignKey('advisory.id')),
    Column('package_id', Integer, ForeignKey('distribution_package.id'))
)


source_package__cve = Table(
    'source_package__cve',
    Base.metadata,
    Column('package_id', Integer, ForeignKey('source_package.id')),
    Column('cve_id', Integer, ForeignKey('cve.id'))
)


class InitPropertyMixin(object):
    def __init__(self, *args, **kwargs):
        attrs = ['name', 'value']
        kwargs.update(dict(zip(attrs, args)))
        self.name = kwargs['name']
        self.value = kwargs['value']


class Advisory(Base):
    __tablename__ = 'advisory'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    subject = Column(String(255))
    url = Column(String(255))

    properties = relationship('AdvisoryProperty',
                              collection_class=set,
                              back_populates='parent')
    cves = relationship('CVE',
                        secondary=advisory__cve,
                        collection_class=set,
                        back_populates='advisories')
    source_packages = relationship('SourcePackage',
                                   secondary=advisory__source_package,
                                   collection_class=set,
                                   back_populates='advisories')
    distribution_packages = relationship(
        'DistributionPackage',
        secondary=advisory__distribution_package,
        collection_class=set,
        back_populates='advisories'
    )


class AdvisoryProperty(Base, InitPropertyMixin):
    __tablename__ = 'advisory_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('advisory.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('Advisory',
                          back_populates='properties')


class CVE(Base):
    __tablename__ = 'cve'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    subject = Column(String(255))

    properties = relationship('CVEProperty',
                              collection_class=set,
                              back_populates='parent')
    source_packages = relationship('SourcePackage',
                                   secondary=source_package__cve,
                                   collection_class=set,
                                   back_populates='cves')
    advisories = relationship('Advisory',
                              secondary=advisory__cve,
                              collection_class=set,
                              back_populates='cves')
    packages = relationship('DistributionPackageIssue',
                            collection_class=set,
                            back_populates='issue')


class CVEProperty(Base, InitPropertyMixin):
    __tablename__ = 'cve_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('cve.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('CVE',
                          back_populates='properties')


class Distribution(Base):
    __tablename__ = 'distribution'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    version = Column(String(255))
    arch = Column(String(255), default='x86_64')

    __table_args__ = ((UniqueConstraint('name', 'version', 'arch'), ))

    properties = relationship('DistributionProperty',
                              collection_class=set,
                              back_populates='parent')
    packages = relationship('DistributionPackage',
                            back_populates='distribution')


class DistributionProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('distribution.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('Distribution',
                          back_populates='properties')


class Product(Base):
    __tablename__ = 'product'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    version = Column(String(255))
    vendor = Column(String(255))

    properties = relationship('ProductProperty',
                              collection_class=set,
                              back_populates='parent')

    packages = relationship('ProductPackage',
                            collection_class=set,
                            back_populates='product')


class ProductProperty(Base, InitPropertyMixin):
    __tablename__ = 'product_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('product.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('Product',
                           back_populates='properties')


class SourceProject(Base):
    __tablename__ = 'source_project'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    description = Column(String(255))

    properties = relationship('SourceProjectProperty',
                              collection_class=set,
                              back_populates='parent')
    source_packages = relationship('SourcePackage',
                                   back_populates='project')


class SourceProjectProperty(Base, InitPropertyMixin):
    __tablename__ = 'source_project_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('source_project.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('SourceProject',
                           back_populates='properties')


class SourcePackage(Base):
    __tablename__ = 'source_package'

    id = Column(Integer, primary_key=True)
    project_id = Column(Integer, ForeignKey('source_project.id'))
    # Base version of a package, basically it's a version
    # taken from upstream source code.
    # Example: 2.5
    version = Column(String(255))

    properties = relationship('SourcePackageProperty',
                              collection_class=set,
                              back_populates='parent')
    cves = relationship('CVE',
                        secondary=source_package__cve,
                        collection_class=set,
                        back_populates='source_packages')
    distribution_packages = relationship('DistributionPackage',
                                         back_populates='source_package')
    advisories = relationship('Advisory',
                              secondary=advisory__source_package,
                              collection_class=set,
                              back_populates='source_packages')
    project = relationship('SourceProject',
                           back_populates='source_packages')

    def add_distribution(self, distribution):
        self.distributions.append(
            DistributionPackage(
                source_package=self,
                distribution=distribution
            )
        )


class SourcePackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'source_package_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('source_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('SourcePackage',
                           back_populates='properties')


class DistributionPackage(Base):
    __tablename__ = 'distribution_package'

    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    package_id = Column(Integer, ForeignKey('source_package.id'),
                        primary_key=True)
    distribution_id = Column(Integer, ForeignKey('distribution.id'),
                             primary_key=True)
    # Version of a package included in a particular distribution.
    # Includes such attributes as 'epoch', 'release version', and so on
    # Example: 1:2.5+dfsg-5ubuntu6
    version = Column(String(255), primary_key=True)

    advisories = relationship('Advisory',
                              secondary=advisory__distribution_package,
                              collection_class=set,
                              back_populates='distribution_packages')
    distribution = relationship('Distribution',
                                 back_populates='packages')
    source_package = relationship('SourcePackage',
                                  back_populates='distribution_packages')
    properties = relationship('DistributionPackageProperty',
                              collection_class=set,
                              back_populates='parent')
    issues = relationship('DistributionPackageIssue',
                          collection_class=set,
                          back_populates='package')


class DistributionPackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_package_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('distribution_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('DistributionPackage',
                           back_populates='properties')


class DistributionPackageIssue(Base):
    __tablename__ = 'distribution_package_issue'

    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    package_id = Column(Integer, ForeignKey('distribution_package.id'),
                        primary_key=True)
    issue_id = Column(Integer, ForeignKey('cve.id'),
                    primary_key=True)
    status = Column(String(255))

    __table_args__ = ((UniqueConstraint('package_id', 'issue_id'), ))

    properties = relationship('DistributionPackageIssueProperty',
                              collection_class=set,
                              back_populates='parent')
    issue = relationship('CVE',
                          back_populates='packages')
    package = relationship('DistributionPackage',
                           back_populates='issues')


class DistributionPackageIssueProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_package_issue_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('distribution_package_issue.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('DistributionPackageIssue',
                           back_populates='properties')


class ProductPackage(Base):
    __tablename__ = 'product_package'

    # Use uuid for 'id' here because:
    # * sqlalchemy doesn't autoincrement this field if it's
    #   not a primary key
    # * sqlalchemy seems to pass 'id' field when creating a record
    #   and I have no idea why (it shouldn't)
    # So uuid should give unique fields and don't bother with autoincrement.
    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    product_id = Column(Integer, ForeignKey('product.id'),
                        primary_key=True)
    package_id = Column(Integer, ForeignKey('distribution_package.id'),
                        primary_key=True)
    # distribution_id = Column(Integer, ForeignKey('distribution.id'),
    #                          primary_key=True)
    # source_package_id = Column(Integer, ForeignKey('source_package.id'),
    #                            primary_key=True)
    # Version of a package included in a product, based on particular
    # distribution.
    # Example: 0.1.9-1ubuntu3-1mint3
    version = Column(String(255))

    __table_args__ = ((UniqueConstraint('product_id',
                                        'package_id'), ))

    properties = relationship('ProductPackageProperty',
                              collection_class=set,
                              back_populates='parent')

    product = relationship('Product',
                           back_populates='packages')
    package = relationship('DistributionPackage')
    # distribution = relationship('Distribution')
    # source_package = relationship('SourcePackage')


class ProductPackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'product_package_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('product_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = ((UniqueConstraint('parent_id',
                                        'name', 'value'), ))

    parent = relationship('ProductPackage',
                           back_populates='properties')
