
import csv
import json
import yaml
import logging

from lib.db.api import DBAPI

from cliff.command import Command
from cliff.lister import Lister
from cliff.show import ShowOne

from lib.adapter import AdvisoryAdapter
from lib.adapter import CVEAdapter
from lib.adapter import ProjectAdapter
from lib.adapter import DistributionAdapter
from lib.adapter import DistributionPackageAdapter
from lib.adapter import SourcePackageAdapter
from lib.adapter import ProductAdapter
from lib.adapter import ProductPackageAdapter

from lib.db.models import Advisory
from lib.db.models import CVE
from lib.db.models import SourceProject
from lib.db.models import SourcePackage
from lib.db.models import ProductPackage
from lib.db.models import Distribution
from lib.db.models import DistributionPackage
from lib.db.models import Product

from lib.misc import GitRepo
from lib.misc import ProjectScanner


def map_parsed_args(parsed_args, args_map):
    d = {}
    for arg, key in args_map.items():
        value = getattr(parsed_args, arg, None)
        if value:
            d[key] = value
    return d


class CliImportAdvisory(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super(CliImportAdvisory, self).get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        filename = parsed_args.filename
        self.log.info("Importing advisory data from '{}'".format(filename))

        count = 0
        with open(filename) as f:
            adv_list = json.load(f)

            for adv_name, adv_data in adv_list.items():
                count += 1

                adv = AdvisoryAdapter()
                adv.initialize(name=adv_name)
                adv.update(adv_data)
                adv.commit()

        self.log.info('Import done. Imported {} advisory object(s).'
                      .format(count))


class CliImportPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        filename = parsed_args.filename
        self.log.info("Importing packages data from '{}'".format(filename))

        count = 0
        with open(filename) as f:
            for line in f:
                count += 1
                data = json.loads(line)
                ppkg = ProductPackageAdapter()
                ppkg.update(data)
                ppkg.commit()

        self.log.info('Import done. Imported {} package object(s).'
                      .format(count))


class CliScanProjects(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        scanner = ProjectScanner()
        scanner.scan_projects()


class CliExportCve(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        def iter(objs):
            for obj in objs:
                cve = CVEAdapter(obj)
                yield cve.export()

        db_api = DBAPI()
        objs = db_api.session.query(CVE).all()
        if parsed_args.filename:
            ext = parsed_args.filename.split('.', maxsplit=1)[-1].lower()
            with open(parsed_args.filename, 'a') as f:
                if ext in ['yml', 'yaml', ]:
                    for data in iter(objs):
                        f.write(yaml.dump(data))
                else:
                    for data in iter(objs):
                        f.write(json.dumps(data))
                        f.write('\n')
        else:
            for data in iter(objs):
                print(dict(data))


class CliExportSourcePackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        def iter(objs):
            for obj in objs:
                pkg = SourcePackageAdapter(obj)
                cols, data = pkg.export()
                yield zip(cols, data)

        db_api = DBAPI()
        objs = db_api.session.query(SourcePackage).all()
        if parsed_args.filename:
            ext = parsed_args.filename.split('.', maxsplit=1)[-1].lower()
            with open(parsed_args.filename, 'a') as f:
                if ext == 'csv':
                    fieldnames = ['project', 'package', 'origin', 'product',
                                  'distribution', 'binary_package', 'cve']
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    writer.writeheader()
                    for data in iter(objs):
                        d = dict(data)
                        # print(d)
                        for pp in d.get('product_packages', []):
                            datarow = {}
                            datarow['project'] = pp\
                                .get('property', {})\
                                .get('source_project', '')
                            datarow['package'] = '{}-{}'.format(
                                pp.get('distribution_package', {})
                                    .get('source_package', {})
                                    .get('name', ''),
                                pp.get('distribution_package', {})
                                    .get('source_package', {})
                                    .get('version', '')
                            )
                            datarow['product'] ='{}-{}'.format(
                                pp.get('product', {})
                                    .get('name', ''),
                                pp.get('product', {})
                                    .get('version', '')
                            )
                            datarow['distribution'] = '{} {} {}'.format(
                                pp.get('distribution_package', {})
                                    .get('distribution', {})
                                    .get('name', ''),
                                pp.get('distribution_package', {})
                                    .get('distribution', {})
                                    .get('version', ''),
                                pp.get('distribution_package', {})
                                    .get('distribution', {})
                                    .get('arch', ''),
                            )
                            datarow['origin'] = pp\
                                .get('source_package', {})\
                                .get('property', {})\
                                .get('origin', '')
                            datarow['cve'] = ' '.join(
                                [x['cve']['name'] for x in d.get('cves', [])]
                            )
                            for pkg in pp.get('binary_packages', ['', ]):
                                datarow['binary_package'] = pkg
                                writer.writerow(datarow)
                elif ext in ['yml', 'yaml', ]:
                    for data in iter(objs):
                        f.write(yaml.dump([dict(data), ]))
                else:
                    for data in iter(objs):
                        f.write(json.dumps(dict(data)))
                        f.write('\n')
        else:
            for data in iter(objs):
                print(dict(data))


class CliListAdvisory(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Advisory).all()
        cols = ('ID', 'Name', 'Subject', 'URL')
        data = [(obj.id, obj.name, obj.subject, obj.url)
                for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListCve(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(CVE).all()
        cols = ('ID', 'Name', 'Subject')
        data = [(obj.id, obj.name, obj.subject) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListProject(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(SourceProject, ProjectAdapter)
        cols = ('ID', 'Name')
        data = [(obj.id, obj.name) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(DistributionPackage,
                            DistributionPackageAdapter)
        cols = ('ID', 'Name', 'Version', 'Distribution')
        data = [(obj.id, obj.name, obj.version, str(obj.distribution))
                for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListSourcePackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'project',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        if 'project' in _kwargs:
            _kwargs['project'] = db_api.get(SourceProject,
                                            name=_kwargs['project'])
        objs = db_api.query(SourcePackage, SourcePackageAdapter, **_kwargs)
        cols = ('ID', 'Name', 'Version')
        data = [(obj.id, obj.name, obj.version) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProduct(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Product).all()
        cols = ('ID', 'Name', 'Version', 'Vendor')
        data = [(obj.id, obj.name, obj.version, obj.vendor) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProductPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        objs = db_api.query(ProductPackage, ProductPackageAdapter)
        cols = ('ID', 'Product', 'Distribution', 'Name', 'Version',)
        data = ((x.id, str(x.product), str(x.distribution), x.name, x.version)
                for x in objs)
        return cols, data


class CliListDistribution(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Distribution).all()
        cols = ('ID', 'Name', 'Version', 'Arch')
        data = [(obj.id, obj.name, obj.version, obj.arch) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliShowCve(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        cve = CVEAdapter()
        cve.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return cve.show(formatter=formatter)[:2]


class CliShowProject(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        prj = ProjectAdapter()
        prj.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return prj.show(formatter=formatter)[:2]


class CliShowPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter()
        pkg.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowSourcePackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--base-version')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = SourcePackageAdapter()
        pkg.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowDistribution(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--dist-version')
        parser.add_argument('--arch', default='x86_64')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'dist_version': 'version',
            'arch': 'arch',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        dist = DistributionAdapter()
        dist.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return dist.show(formatter=formatter)[:2]


class CliShowDistributionPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter()
        pkg.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowAdvisory(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = AdvisoryAdapter()
        obj.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliShowProduct(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductAdapter()
        obj.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliShowProductPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductPackageAdapter()
        obj.try_load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]
