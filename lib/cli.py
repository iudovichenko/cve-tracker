
import logging

from cliff.command import Command
from cliff.lister import Lister
from cliff.show import ShowOne

from lib.actions import map_parsed_args
from lib.actions import ImportAdvisoryAction
from lib.actions import ImportPackageAction
from lib.actions import ExportCveAction
from lib.actions import ExportSourcePackageAction
from lib.actions import InitDbAction
from lib.actions import ScanDistributionPackageAction
from lib.actions import ReportUnresolvedCveAction
from lib.actions import ExportHtmlAction

from lib.adapter import AdvisoryAdapter
from lib.adapter import CVEAdapter
from lib.adapter import SourceProjectAdapter
from lib.adapter import DistributionAdapter
from lib.adapter import DistributionPackageAdapter
from lib.adapter import SourcePackageAdapter
from lib.adapter import ProductAdapter
from lib.adapter import ProductPackageAdapter

from lib.db.api import DBAPI

from lib.db.models import Advisory
from lib.db.models import CVE
from lib.db.models import SourceProject
from lib.db.models import SourcePackage
from lib.db.models import ProductPackage
from lib.db.models import ProductPackageIssue
from lib.db.models import Distribution
from lib.db.models import DistributionPackage
from lib.db.models import Product

from lib.misc import GitProjectScanner


class CliImportAdvisory(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ImportAdvisoryAction(parsed_args=parsed_args,
                                      args_map=args_map)
        action.take_action()


class CliImportPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ImportPackageAction(parsed_args=parsed_args,
                                     args_map=args_map)
        action.take_action()


class CliScanProjects(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--out-file')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'out_file': 'filename',
        }
        mapped_args = map_parsed_args(parsed_args=parsed_args,
                                      args_map=args_map)
        scanner = GitProjectScanner(**mapped_args)
        scanner.start()


class CliExportCve(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ExportCveAction(parsed_args=parsed_args,
                                 args_map=args_map)
        action.take_action()


class CliExportSourcePackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ExportSourcePackageAction(parsed_args=parsed_args,
                                           args_map=args_map)
        action.take_action()


class CliListAdvisory(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Advisory).all()
        cols = ('ID', 'Name', 'Subject', 'URL')
        data = [(obj.id, obj.name, obj.subject, obj.url)
                for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListCve(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(CVE).all()
        cols = ('ID', 'Name', 'Subject')
        data = [(obj.id, obj.name, obj.subject) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListProject(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(SourceProject, SourceProjectAdapter)
        cols = ('ID', 'Name')
        data = [(obj.id, obj.name) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(DistributionPackage,
                            DistributionPackageAdapter)
        cols = ('ID', 'Name', 'Version', 'Distribution')
        data = [(obj.id, obj.name, obj.version, str(obj.distribution))
                for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListSourcePackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'project',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        if 'project' in _kwargs:
            _kwargs['project'] = db_api.get(SourceProject,
                                            name=_kwargs['project'])
        objs = db_api.query(SourcePackage, SourcePackageAdapter, **_kwargs)
        cols = ('ID', 'Name', 'Version')
        data = [(obj.id, obj.name, obj.version) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProduct(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Product).all()
        cols = ('ID', 'Name', 'Version', 'Vendor')
        data = [(obj.id, obj.name, obj.version, obj.vendor) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProductPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        parser.add_argument('--resolved', type=int, default=-1)
        parser.add_argument('--affected', type=int, default=-1)
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        join = []
        if parsed_args.resolved == 1:
            join.append((ProductPackageIssue, {'resolved': True}))
        elif parsed_args.resolved == 0:
            join.append((ProductPackageIssue, {'resolved': False}))
        if parsed_args.affected == 1:
            join.append((ProductPackageIssue, {'affected': True}))
        elif parsed_args.affected == 0:
            join.append((ProductPackageIssue, {'affected': False}))
        objs = db_api.query(ProductPackage, ProductPackageAdapter, join=join)
        cols = ('ID', 'Product', 'Distribution', 'Name', 'Version',)
        data = ((x.id, str(x.product), str(x.distribution), x.name, x.version)
                for x in objs)
        return cols, data


class CliListDistribution(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Distribution).all()
        cols = ('ID', 'Name', 'Version', 'Arch')
        data = [(str(obj.id), str(obj.name), str(obj.version), str(obj.arch))
                for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListDistributionPackage(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(DistributionPackage,
                            DistributionPackageAdapter)
        cols = ('ID', 'Distribution', 'Name', 'Version')
        data = [
            (obj.id, str(obj.distribution),
            obj.name, obj.version)
            for obj in objs
        ]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliShowCve(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        cve = CVEAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return cve.show(formatter=formatter)[:2]


class CliShowProject(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        prj = SourceProjectAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return prj.show(formatter=formatter)[:2]


class CliShowPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowSourcePackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--base-version')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = SourcePackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowDistribution(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--dist-version')
        parser.add_argument('--arch')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'dist_version': 'version',
            'arch': 'arch',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        dist = DistributionAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return dist.show(formatter=formatter)[:2]


class CliShowDistributionPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowAdvisory(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = AdvisoryAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliShowProduct(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliShowProductPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductPackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliUpdateCveStatus(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(CVE).all()
        for obj in objs:
            cve = CVEAdapter(obj)
            cve.update_status()


class CliUpdateDistributionPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--set-distribution')
        parser.add_argument('--set-version')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'set_distribution': 'distribution',
            'set_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = DistributionPackageAdapter()
        obj.update(**_kwargs)


class CliUpdateProductPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--set-dist-package')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'set_dist_package': 'distribution_package_id',
        }
        data = map_parsed_args(parsed_args, args_map)
        obj = ProductPackageAdapter()
        obj.update(data)


class CliInitDb(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        action = InitDbAction()
        action.take_action()


class CliScanDistributionPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'set_distribution': 'distribution',
            'set_version': 'version',
        }
        action = ScanDistributionPackageAction(parsed_args=parsed_args,
                                               args_map=args_map)
        action.take_action()


class CliReportUnresolvedCve(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        action = ReportUnresolvedCveAction()
        action.take_action()


class CliExportHtml(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--htmldir')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'htmldir': 'htmldir',
        }
        action = ExportHtmlAction(parsed_args=parsed_args,
                                  args_map=args_map)
        action.take_action()
