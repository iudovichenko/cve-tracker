
import json
import logging

from lib.db.api import DbApi

from cliff.command import Command
from cliff.lister import Lister
from cliff.show import ShowOne

from lib.objects import SecurityAdvisory

from lib.db.models import CVE
from lib.db.models import CVEProperty
from lib.db.models import SourcePackage
from lib.db.models import SourcePackageProperty
from lib.db.models import Distribution
from lib.db.models import DistributionProperty
from lib.db.models import Product
from lib.db.models import ProductProperty
from lib.db.models import ProductDistributionPackage
from lib.db.models import ProductDistributionPackageProperty


class CliImportAdvisory(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super(CliImportAdvisory, self).get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        filename = parsed_args.filename
        self.log.info("Importing advisory data from '{}'".format(filename))

        count = 0
        db_api = DbApi()
        with open(filename) as f:
            adv_list = json.load(f)

            for adv_name, adv_data in adv_list.items():
                count += 1

                adv = SecurityAdvisory(adv_name)
                adv.advisory.url = adv_data.get('url', '')

                for cve_name, cve_data in adv_data.get('cves', {}).items():
                    cve = adv.add_cve(cve_name)
                    cve.url = cve_data['url']

                for pkg in adv_data.get('packages', []):
                    spkg = adv.add_source_package(
                        pkg['name'],
                        pkg['full_ver']
                    )
                    db_api.add_property(spkg, 'source_version', pkg['src_ver'])

                adv.save()

        self.log.info('Import done. Imported {} advisory object(s).'
                      .format(count))


class CliImportPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super(CliImportPackage, self).get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        filename = parsed_args.filename
        self.log.info("Importing packages data from '{}'".format(filename))

        count = 0
        db_api = DbApi()
        with open(filename) as f:
            pkgs_json = json.load(f)
            for data in pkgs_json:
                count += 1

                pkg = db_api.get(
                    SourcePackage,
                    name=data['source_package'],
                    version=data['upstream_version']
                )

                dist = db_api.get(
                    Distribution,
                    name=data['distribution']['name'],
                    version=data['distribution']['version'],
                    arch=data['distribution']['arch']
                )

                prod = db_api.get(
                    Product,
                    name=data['product']['name'],
                    version=data['product']['version']
                )

                # Need this before adding to association table below
                db_api.session.commit()

                link = db_api.get(
                    ProductDistributionPackage,
                    product=prod,
                    distribution=dist,
                    source_package=pkg
                )

                for name in ['epoch', 'version', 'revision', 'raw']:
                    value = data['version'].get(name, None)
                    if value:
                        db_api.add_property(link, name, value, unique=True)

                for key in ['spec_project', 'source_project']:
                    value = data.get(key, None)
                    if value:
                        db_api.add_property(link, key, value)

                db_api.session.commit()


        self.log.info('Import done. Imported {} package object(s).'
                      .format(count))


class CliListCve(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DbApi()
        objs = db_api.session.query(CVE).all()
        return (('ID', 'Name', 'Subject'),
                ((obj.id, obj.name, obj.subject) for obj in objs)
                )


class CliListPackage(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DbApi()
        objs = db_api.session.query(SourcePackage).all()
        return (('ID', 'Name', 'Version'),
                ((obj.id, obj.name, obj.version) for obj in objs)
                )


class CliListProduct(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DbApi()
        objs = db_api.session.query(Product).all()
        return (('ID', 'Name', 'Version', 'Vendor'),
                ((obj.id, obj.name, obj.version, obj.vendor) for obj in objs)
                )


class CliShowCve(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super(CliShowCve, self).get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        db_api = DbApi()
        query = db_api.session.query(CVE)
        if getattr(parsed_args, 'id', None):
            query = query.filter(CVE.id == parsed_args.id)
        elif getattr(parsed_args, 'name', None):
            query = query.filter(CVE.name == parsed_args.name)
        res = query.one()

        cols = ['Name', 'Subject', ]
        data = [res.name, res.subject, ]
        for prop in res.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        advisories = [link.advisory.name for link in res.advisories]
        pkgs = ['{}-{}'.format(link.source_package.name,
                               link.source_package.version)
                for link in res.source_packages]

        formatter = self.formatter.__class__.__name__

        if formatter == 'TableFormatter':
            for item in advisories:
                cols.append('Advisory')
                data.append(item)

            for item in pkgs:
                cols.append('Package')
                data.append(item)
        else:
            cols.append('Advisories')
            data.append(list(advisories))

            cols.append('Packages')
            data.append(list(pkgs))

        return (cols, data)


class CliShowPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super(CliShowPackage, self).get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        db_api = DbApi()
        query = db_api.session.query(SourcePackage)
        if getattr(parsed_args, 'id', None):
            query = query.filter(SourcePackage.id == parsed_args.id)
        elif getattr(parsed_args, 'name', None):
            query = query.filter(SourcePackage.name == parsed_args.name)
        res = query.one()

        cols = ['Name', 'Version', ]
        data = [res.name, res.version, ]
        for prop in res.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        advisories = [link.advisory.name for link in res.advisories]
        cves = [link.cve.name for link in res.cves]

        formatter = self.formatter.__class__.__name__

        if formatter == 'TableFormatter':
            for item in advisories:
                cols.append('Advisory')
                data.append(item)

            for item in cves:
                cols.append('CVE')
                data.append(item)
        else:
            cols.append('Advisories')
            data.append(list(advisories))

            cols.append('CVE')
            data.append(list(cves))

        return (cols, data)
