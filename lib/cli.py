
import json
import logging

from lib.db.api import DBAPI

from cliff.command import Command
from cliff.lister import Lister
from cliff.show import ShowOne

from lib.adapter import AdvisoryAdapter
from lib.adapter import CVEAdapter
from lib.adapter import ProjectAdapter
from lib.adapter import DistributionAdapter
from lib.adapter import DistributionPackageAdapter
from lib.adapter import SourcePackageAdapter
from lib.adapter import ProductAdapter
from lib.adapter import ProductPackageAdapter

from lib.db.models import Advisory
from lib.db.models import CVE
from lib.db.models import SourceProject
from lib.db.models import SourcePackage
from lib.db.models import ProductPackage
from lib.db.models import Distribution
from lib.db.models import DistributionPackage
from lib.db.models import Product

from lib.misc import GitRepo
from lib.misc import ProjectScanner


def map_parsed_args(parsed_args, args_map):
    d = {}
    for arg, key in args_map.items():
        value = getattr(parsed_args, arg, None)
        if value:
            d[key] = value
    return d


class CliImportAdvisory(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super(CliImportAdvisory, self).get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        filename = parsed_args.filename
        self.log.info("Importing advisory data from '{}'".format(filename))

        count = 0
        with open(filename) as f:
            adv_list = json.load(f)

            for adv_name, adv_data in adv_list.items():
                count += 1

                adv = AdvisoryAdapter()
                adv.initialize(name=adv_name)
                adv.update(adv_data)
                adv.commit()

        self.log.info('Import done. Imported {} advisory object(s).'
                      .format(count))


class CliImportPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        return parser

    def take_action(self, parsed_args):
        filename = parsed_args.filename
        self.log.info("Importing packages data from '{}'".format(filename))

        count = 0
        with open(filename) as f:
            for line in f:
                count += 1
                data = json.loads(line)
                ppkg = ProductPackageAdapter()
                ppkg.update(data)
                ppkg.commit()

        self.log.info('Import done. Imported {} package object(s).'
                      .format(count))


class CliScanProjects(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        scanner = ProjectScanner()
        scanner.scan_projects()


class CliListAdvisory(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Advisory).all()
        cols = ('ID', 'Name', 'Subject', 'URL')
        data = [(obj.id, obj.name, obj.subject, obj.url)
                for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListCve(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(CVE).all()
        cols = ('ID', 'Name', 'Subject')
        data = [(obj.id, obj.name, obj.subject) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListProject(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(SourceProject, ProjectAdapter)
        cols = ('ID', 'Name')
        data = [(obj.id, obj.name) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(DistributionPackage,
                            DistributionPackageAdapter)
        cols = ('ID', 'Name', 'Version', 'Distribution')
        data = [(obj.id, obj.name, obj.version, str(obj.distribution))
                for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListSourcePackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'project',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        if 'project' in _kwargs:
            _kwargs['project'] = db_api.get(SourceProject,
                                            name=_kwargs['project'])
        objs = db_api.query(SourcePackage, SourcePackageAdapter, **_kwargs)
        cols = ('ID', 'Name', 'Version')
        data = [(obj.id, obj.name, obj.version) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProduct(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Product).all()
        cols = ('ID', 'Name', 'Version', 'Vendor')
        data = [(obj.id, obj.name, obj.version, obj.vendor) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProductPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        objs = db_api.query(ProductPackage, ProductPackageAdapter)
        cols = ('ID', 'Product', 'Distribution', 'Name', 'Version',)
        data = ((x.id, str(x.product), str(x.distribution), x.name, x.version)
                for x in objs)
        return cols, data


class CliListDistribution(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Distribution).all()
        cols = ('ID', 'Name', 'Version', 'Arch')
        data = [(obj.id, obj.name, obj.version, obj.arch) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliShowCve(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        cve = CVEAdapter()
        cve.try_load(**_kwargs)

        cols = ['Name', 'Subject', ]
        data = [cve.name, cve.subject, ]

        advisories = [x.name for x in cve.advisories]
        advisories.sort()

        pkgs = ['{}-{}'.format(x.name, x.version)
                for x in cve.source_packages]
        pkgs.sort()

        for item in advisories:
            cols.append('Advisory')
            data.append(item)

        for item in pkgs:
            cols.append('Affects')
            data.append(item)

        for prop in cve.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        for x in cve.distribution_issues:
            cols.append('Affects Distribution')
            data.append(str(x))

        for x in cve.product_issues:
            cols.append('Affects Product')
            data.append(str(x))

        return cols, data


class CliShowProject(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = ProjectAdapter()
        pkg.try_load(**_kwargs)

        cols = ['ID', 'Name' ]
        data = [pkg.id, pkg.name ]

        for item in pkg.packages:
            cols.append('Source Package')
            data.append(str(item))

        for prop in pkg.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        return cols, data


class CliShowPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter()
        pkg.try_load(**_kwargs)

        cols = ['ID', 'Name', 'Version', ]
        data = [pkg.id, pkg.name, pkg.version, ]

        for prop in pkg.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        advisories = [x.dict() for x in pkg.advisories]
        advisories.sort(key=lambda x: x['name'])

        cves = [x.dict() for x in pkg.source_package.issues]
        cves.sort(key=lambda x: x['name'])

        # distributions = [obj.dict({'package': ver})
        #                  for obj, ver in pkg.distributions]
        # distributions.sort(key=lambda x: x['name'])

        formatter = self.formatter.__class__.__name__
        if formatter == 'TableFormatter':
            for item in advisories:
                cols.append('Advisory')
                data.append('{0[name]}'.format(item))

            for item in cves:
                cols.append('CVE')
                data.append('{0[name]}'.format(item))

            # for item in distributions:
            #     cols.append('Distribution')
            #     data.append('{0[name]} {0[version]} {0[arch]} ({0[package]})'
            #                 .format(item))
        else:
            cols.append('Advisories')
            data.append(advisories)

            cols.append('CVE')
            data.append(cves)

            # cols.append('Distributions')
            # data.append(distributions)

        return cols, data


class CliShowSourcePackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--base-version')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = SourcePackageAdapter()
        pkg.try_load(**_kwargs)

        cols = ['ID', 'Name', 'Version', ]
        data = [pkg.id, pkg.name, pkg.version, ]

        for prop in pkg.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        advisories = [x.dict() for x in pkg.advisories]
        advisories.sort(key=lambda x: x['name'])

        cves = [x.dict() for x in pkg.cves]
        cves.sort(key=lambda x: x['name'])

        distributions = [obj.dict({'package': ver})
                         for obj, ver in pkg.distributions]
        distributions.sort(key=lambda x: x['name'])

        formatter = self.formatter.__class__.__name__
        if formatter == 'TableFormatter':
            for item in advisories:
                cols.append('Advisory')
                data.append('{0[name]}'.format(item))

            for item in cves:
                cols.append('CVE')
                data.append('{0[name]}'.format(item))

            for item in distributions:
                cols.append('Distribution')
                data.append('{0[name]} {0[version]} {0[arch]} ({0[package]})'
                            .format(item))
        else:
            cols.append('Advisories')
            data.append(advisories)

            cols.append('CVE')
            data.append(cves)

            cols.append('Distributions')
            data.append(distributions)

        return cols, data


class CliShowDistribution(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--dist-version')
        parser.add_argument('--arch', default='x86_64')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'dist_version': 'version',
            'arch': 'arch',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        dist = DistributionAdapter()
        dist.try_load(**_kwargs)

        cols = ['ID', 'Name', 'Version', 'Arch']
        data = [dist.id, dist.name, dist.version, dist.arch]

        pkgs = []
        for pkg, ver in dist.source_packages:
            pkgs.append((pkg.id, pkg.name, pkg.version, ver))
        pkgs.sort(key=lambda x: ''.join((x[1], x[3])))

        for pkg in pkgs:
            cols.append('Package')
            data.append(pkg)

        return cols, data


class CliShowAdvisory(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = AdvisoryAdapter()
        obj.try_load(**_kwargs)

        cols = ['ID', 'Name', 'Subject', 'URL']
        data = [obj.id, obj.name, obj.subject, obj.url]

        fmt = '{0[name]}'
        for item in obj.source_packages:
            cols.append('Package')
            data.append(fmt.format(item.dict()))

        fmt = '{0[name]}-{0[version]} ' \
              '({0[distribution][name]} ' \
              '{0[distribution][version]} ' \
              '{0[distribution][arch]})'
        for item in obj.distribution_packages:
            cols.append('Distribution package')
            data.append(fmt.format(item.dict()))

        fmt = '{0[name]}'
        for item in obj.cves:
            cols.append('CVE')
            data.append(fmt.format(item.dict()))

        for x in obj.properties:
            cols.append('Property:{}'.format(x.name))
            data.append(x.value)

        self.log.debug("Exiting take action()")
        return cols, data


class CliShowProduct(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductAdapter()
        obj.try_load(**_kwargs)

        cols = ['ID', 'Name', 'Version', ]
        data = [obj.id, obj.name, obj.version, ]

        packages = {}
        for pkg in obj.packages:
            packages.setdefault(pkg.distribution, []).append(pkg)

        for dist, pkgs in packages.items():
            cols.append('Distribution')
            data.append('{}, {} packages'.format(str(dist), len(pkgs)))

        return cols, data


class CliShowProductPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductPackageAdapter()
        obj.try_load(**_kwargs)

        cols = ['ID', 'Name', 'Version', 'Distribution', 'Product']
        data = [obj.id, obj.name, obj.version, str(obj.distribution),
                str(obj.product)]

        return cols, data