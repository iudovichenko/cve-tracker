
import datetime
import logging
import json
import os
import re
import time
import yaml
import urllib3

from lib.cpe import CpeWFN
from lib.db.models import *
from lib.db.api import DBAPI
from lib.misc import DebianVersion
from lib.utils import match_project_overrides

from lib.config import CONFIG
from sqlalchemy import func
from sqlalchemy.orm.exc import NoResultFound

from configdir import ConfigDir


class GenericAdapter(object):
    _catalog = {}
    db_api = DBAPI()
    log = logging.getLogger(__name__)

    def __new__(cls, instance=None, *args, **kwargs):
        if instance:
            return cls._catalog.setdefault(instance, super().__new__(cls))
        return cls.load(*args, **kwargs)

    def __init__(self, instance=None, *args, **kwargs):
        self.__dict__.setdefault('_', None)
        if instance is None:
            if self._ is None:
                raise Exception("Can't initialiase object '{}'".format(self))
        else:
            if self.__dict__['_'] is None:
                self._ = instance
                self.db_api.session.add(self._)
                self.db_api.session.flush()

    def __getattr__(self, item):
        return self.__dict__.get(item, getattr(self._, item))

    @classmethod
    def load(cls, **kwargs):
        model_name = re.sub(r'Adapter$', '', cls.__name__)
        cls.log.debug(kwargs)

        alias = kwargs.pop('alias', None)
        if alias:
            objs = list(cls.find_by_property('alias', value=alias))
            if len(objs) > 0:
                if len(objs) > 1:
                    cls.log.error("Multiple objects found for alias '{}'"
                                  .format(alias))
                return objs[0]

        model = eval(model_name)
        query = cls.db_api.session.query(model)
        for key, value in kwargs.items():
            if isinstance(value, str):
                query = query.filter(
                    func.lower(getattr(model, key)) == value.lower())
            else:
                query = query.filter(getattr(model, key) == value)
        instance = query.one()
        return cls(instance)

    @classmethod
    def init(cls, **kwargs):
        try:
            return cls.load(**kwargs)
        except NoResultFound:
            model = eval(re.sub(r'Adapter$', '', cls.__name__))
            kwargs.pop('alias', None)
            return cls(model(**kwargs))
        except:
            raise

    @classmethod
    def find_by_property(cls, name, **kwargs):
        model_name = re.sub(r'Adapter$', '', cls.__name__)
        model_property = eval(model_name + 'Property')
        query = cls.db_api.session.query(model_property.parent_id)
        query = query.filter(model_property.name == name)
        if 'value' in kwargs:
            query = query.filter(
                func.lower(model_property.value) == kwargs['value'].lower())
        query = query.distinct(model_property.parent_id)
        for result in query.all():
            yield cls(id=result[0])

    def get(self, name, default=None):
        return getattr(self, name, getattr(self._, name, default))

    def set(self, name, value):
        setattr(self._, name, value)

    def search(self, *args, **kwargs):
        model = eval(re.sub(r'Adapter$', '', self.__class__.__name__))
        query = self.db_api.session.query(model)
        for name, value in kwargs.items():
            query = query.filter(getattr(model, name) == value)
        return query.all()

    def get_property(self, name, as_scalar=False, **kwargs):
        cls = eval(self._.__class__.__name__ + 'Property')
        result = self.db_api.get(cls, name=name, parent_id=self._.id)
        if len(result) == 0:
            if 'default' in kwargs:
                return kwargs['default']
            else:
                raise NoResultFound()

        if as_scalar:
            if len(result) > 1:
                raise Exception("Multiple properties found but not allowed.")
            return result[0]

        return result

    def set_property(self, name, value):
        try:
            property = self.get_property(name, as_scalar=True)
            property.value = value
        except NoResultFound:
            cls = eval(self._.__class__.__name__ + 'Property')
            property = self.db_api.create(cls, name=name, value=value,
                                          parent_id=self._.id)
        self._.properties.add(property)

    def add_property(self, name, value):
        cls = eval(self._.__class__.__name__ + 'Property')
        result = self.db_api.get(cls, name=name, value=value,
                                 parent_id=self._.id)
        if len(result) == 0:
            property = self.db_api.create(cls, name=name, value=value,
                                          parent_id=self._.id)
            self._.properties.add(property)

    def properties(self, name=None):
        for x in self._.properties:
            if name is None:
                yield x.name, x.value
            elif x.name.lower() == str(name).lower():
                yield x.name, x.value

    def commit(self):
        self.db_api.session.commit()

    def __repr__(self):
        return 'Class: {}, ID: {}'.format(self.__class__.__name__, self._.id)

    def export(self):
        return self.dict()

    def dict(self, **kwargs):
        data = kwargs.get('data', {})
        append = kwargs.get('append', {})
        p = {}

        try:
            for name, value in self.properties():
                p.setdefault(name, []).append(value)
        except:
            pass

        for k, v in p.items():
            if len(v) == 1:
                p[k] = v[0]

        data.update({
            '__class__': self.__class__.__name__,
            '__str__': str(self),
            'id': self.id,
        })
        data.update(append)
        data.update({
            'property': p
        })
        return data

    def show(self, **kwargs):
        cols = []
        data = []
        raw = self.export()

        if kwargs.get('formatter', None) == 'TableFormatter':
            for path, name in kwargs.get('fields', ()):
                value = raw
                try:
                    for key in path:
                        value = value.get(key, None)
                except:
                    value = None
                cols.append(name)
                data.append(value)

            for key, value in raw.get('property', {}).items():
                if isinstance(value, list):
                    for x in value:
                        cols.append('Property:{}'.format(key))
                        data.append(x)
                else:
                    cols.append('Property:{}'.format(key))
                    data.append(value)
        else:
            for k, v in raw.items():
                cols.append(k)
                data.append(v)

        return cols, data, raw


class AdvisoryAdapter(GenericAdapter):
    @property
    def cves(self):
        for x in self._.cves:
            yield CVEAdapter(x)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield SourcePackageAdapter(x)

    @property
    def distribution_packages(self):
        for x in self._.distribution_packages:
            yield DistributionPackageAdapter(x)

    @property
    def product_packages(self):
        for x in self._.product_packages:
            yield ProductPackageAdapter(x)

    def add_cve(self, cve):
        self._.cves.add(cve._)

    def add_source_package(self, name, version):
        prj = SourceProjectAdapter.init(name=name, alias=name)
        pkg = SourcePackageAdapter.init(project=prj._, version=version)
        self._.source_packages.add(pkg._)
        return pkg

    def add_package(self, package):
        self._.distribution_packages.add(package._)

    def commit(self):
        super().commit()

    def update(self, data={}):
        url = data.get('url', None)
        if url:
            self.set('url', url)

        subject = data.get('subject', None)
        if subject:
            self.set('subject', subject)

        ts = data.get('timestamp', None)
        if ts:
            self.set_property(name='released_on', value=str(ts))

        for cve_name, cve_data in data.get('cves', {}).items():
            cve = CVEAdapter.init(name=cve_name)

            cve.set('subject', cve_data.get('subject', ''))
            url = cve_data.get('url', None)
            if url:
                cve.add_property(
                    name='URL',
                    value=url
                )

            for url in cve_data.get('references', []):
                cve.add_property(name='reference', value=url)

            self._.cves.add(cve._)

        overrides_path = CONFIG.config.get('common', 'overrides')
        overrides = ConfigDir(os.path.join(overrides_path, 'packages'))
        re_sep = re.compile(r'[\\\/]')
        for pkg_data in data.get('packages', []):
            name = re_sep.sub('|', pkg_data['name'])
            prj_data = overrides.match(name)
            prj_data.setdefault('name', name.split('|')[-1])
            prj_data.setdefault('type', None)
            self.log.debug("{} --> {}".format(name, prj_data))

            prj = SourceProjectAdapter.init(name=prj_data['name'],
                                            alias=prj_data['name'],
                                            type=prj_data['type'])
            prj.update(prj_data)
            prj.refresh()

            pkg = SourcePackageAdapter.init(
                project=prj._,
                version=pkg_data['upstream_version']
            )

            self._.source_packages.add(pkg._)

            dist = DistributionAdapter.load_by_alias(alias=pkg_data['dist'])

            dist_pkg = DistributionPackageAdapter.init(
                source_package=pkg._,
                distribution=dist._,
                version=pkg_data['full_version']
            )

            self._.distribution_packages.add(dist_pkg._)

        for cve in self._.cves:
            for pkg in self._.source_packages:
                obj = SourcePackageIssueAdapter.init(
                    package=pkg, issue=cve)
                if obj._.status is None:
                    obj.set('status', 'Affected')

            for pkg in self._.distribution_packages:
                obj = DistributionPackageIssueAdapter.init(
                    package=pkg, issue=cve)
                if obj._.status is None:
                    obj.set('status', 'UNKNOWN')

        self.commit()

    def show(self, formatter=None):
        fields = (
            (('id',), 'ID'),
            (('name',), 'Name'),
            (('subject',), 'Subject'),
            (('url',), 'URL'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            fmt = '{0[project][name]}'
            for x in raw.get('source_packages', []):
                cols.append('Package')
                data.append(fmt.format(x))

            fmt = '{0[source_package][project][name]}-' \
                  '{0[source_package][version]} ' \
                  '({0[distribution][name]} ' \
                  '{0[distribution][version]} ' \
                  '{0[distribution][arch]})'
            for x in raw.get('distribution_packages', []):
                cols.append('Distribution package')
                data.append(fmt.format(x))

            fmt = '{0[name]}'
            for x in raw.get('cves', []):
                cols.append('CVE')
                data.append(fmt.format(x))

        return cols, data, raw

    def export(self):
        data = super().export()

        data['source_packages'] = [
            x.dict() for x in self.source_packages
        ]

        data['distribution_packages'] = [
            x.dict() for x in self.distribution_packages
        ]

        data['cves'] = [
            x.dict() for x in self.cves
        ]

        return data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'subject': self.subject,
            'url': self.url,
        }
        super().dict(data=data, append=append)
        return data


class CPEAdapter(GenericAdapter):
    @property
    def projects(self):
        for x in self._.projects:
            yield SourceProjectAdapter(x)

    def show(self, formatter=None):
        fields = (
            (('id',), 'ID'),
            (('part',), 'Part'),
            (('vendor',), 'Vendor'),
            (('product',), 'Product'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        return cols, data, raw

    def export(self):
        data = super().export()

        return data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'part': self.part,
            'vendor': self.vendor,
            'product': self.product,
        }
        super().dict(data=data, append=append)
        return data

    @property
    def wfn(self):
        wfn = CpeWFN()
        wfn.set('part', self.part)
        wfn.set('vendor', self.vendor)
        wfn.set('product', self.product)
        return wfn


class CVEAdapter(GenericAdapter):
    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def source_package_issues(self):
        for x in self._.source_packages:
            yield SourcePackageIssueAdapter(x)

    @property
    def source_packages(self):
        for x in self.source_package_issues:
            yield x.package

    @property
    def urls(self):
        for x in self.properties:
            if x.name.lower() == 'url':
                yield x.value

    @property
    def distribution_package_issues(self):
        for x in self._.distribution_packages:
            yield DistributionPackageIssueAdapter(x)

    @property
    def product_package_issues(self):
        for x in self._.product_packages:
            yield ProductPackageIssueAdapter(x)

    @property
    def product_packages(self):
        for x in self._.product_packages:
            yield ProductPackageAdapter(x.package)

    def show(self, formatter=None):
        fields = (
            (('id',), 'ID'),
            (('name',), 'Name'),
            (('subject',), 'Subject'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for x in raw.get('advisories', []):
                cols.append('Advisory')
                data.append(x['name'])

            for x in raw.get('source_package_issues', []):
                cols.append('Affects')
                data.append(x['__str__'])

            for x in raw.get('distribution_package_issues'):
                cols.append('Affected Distribution')
                data.append(x['__str__'])

            for x in raw.get('product_package_issues'):
                cols.append('Affected Product')
                data.append(x['__str__'])

        return cols, data, raw

    def export(self):
        data = super().export()

        data['advisories'] = [
            x.dict() for x in self.advisories
        ]

        data['source_package_issues'] = [
            x.dict() for x in self.source_package_issues
        ]

        data['distribution_package_issues'] = [
            x.dict() for x in self.distribution_package_issues
        ]

        data['product_package_issues'] = [
            x.dict() for x in self.product_package_issues
        ]

        return data

    def update_status(self):
        for sp in self.source_packages:
            for dp in sp.distribution_packages:
                issues = list(dp.issues(self))
                if len(issues) == 0:
                    dp.add_cve(self)
                for pp in dp.product_packages:
                    issues = list(pp.issues(self))
                    if len(issues) == 0:
                        pp.add_cve(self)
        self.commit()

    def dict(self, append={}):
        data = {
            'name': self.name,
            'subject': self.subject,
        }
        super().dict(data=data, append=append)
        return data


class DistributionAdapter(GenericAdapter):
    @property
    def source_packages(self):
        for x in self._.packages:
            yield SourcePackageAdapter(x.source_package), x.version

    @property
    def distribution_packages(self):
        for x in self._.packages:
            yield DistributionPackageAdapter(x)

    @property
    def products(self):
        products = set()
        for x in self.product_packages():
            products.add(x.product)
        return products

    def product_packages(self, product=None):
        for x in self._.product_packages:
            if product is None:
                yield ProductPackageAdapter(x)
            elif x.product.id == product.id:
                yield ProductPackageAdapter(x)

    def add_package(self, source_package, version=None):
        obj = DistributionPackageAdapter.init(
            source_package=source_package._,
            distribution=self._,
            version=version,
        )
        return obj

    @classmethod
    def load_by_alias(cls, alias=None):
        if alias is None:
            return DistributionAdapter.none()

        aliases = list(cls.find_by_property('alias', value=alias))
        if len(aliases) == 0:
            if '-' in alias:
                alias_ = alias.rsplit('-', 1)[0]
                cls.log.debug("WARNING: No distribution found for alias '{}',"
                                " trying '{}'".format(alias, alias_))
                return cls.load_by_alias(alias_)
            else:
                cls.log.debug("ERROR: No distribution found for alias '{}'"
                              .format(alias))
                return DistributionAdapter.none()

        if len(aliases) > 1:
            raise Exception("Multiple distributions found with alias {}"
                            .format(alias))

        return aliases[0]

    @classmethod
    def none(cls):
        return cls.init(name=None, version=None, arch=None)

    @property
    def is_none(self):
        return self.name is None

    def __str__(self):
        if self.name is None:
            return '_NONE_'
        else:
            s = '{}'.format(self.name)
            if self.version:
                s += ' {}'.format(self.version)
            if self.arch:
                s += ' ({})'.format(self.arch)
            return s

    def show(self, formatter=None):
        fields = (
            (('id',), 'ID'),
            (('name',), 'Name'),
            (('version',), 'Version'),
            (('arch',), 'Architecture'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for x in raw.get('distribution_packages'):
                cols.append('Distribution package')
                data.append(x['__str__'])

        return cols, data, raw

    def export(self):
        data = super().export()

        data['distribution_packages'] = [
            x.dict() for x in self.distribution_packages
        ]

        return data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'version': self.version,
            'arch': self.arch,
        }
        super().dict(data=data, append=append)
        return data


class DistributionPackageAdapter(GenericAdapter):
    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def name(self):
        return self._.source_package.project.name

    @property
    def version(self):
        return self._.version or '<empty>'

    @property
    def distribution(self):
        return DistributionAdapter(self._.distribution)

    @property
    def products(self):
        for x in self._.products:
            yield ProductAdapter(x.product)

    @property
    def product_packages(self):
        for x in self._.product_packages:
            yield ProductPackageAdapter(x)

    @property
    def source_package(self):
        return SourcePackageAdapter(self._.source_package)

    @property
    def packages(self):
        sp = self.source_package
        for pp in self.product_packages:
            yield sp, self, pp
        else:
            if pp is None:
                yield sp, self, pp

    @property
    def cves(self):
        for x in self._.issues:
            yield DistributionPackageIssueAdapter(x)

    def issues(self, cve=None):
        filter_by = {'package': self._}
        if cve:
            filter_by['issue'] = cve._
        for x in self.db_api.query(DistributionPackageIssue,
                                   DistributionPackageIssueAdapter,
                                   filter_by=filter_by):
            yield x

    # def issues(self, cve):
    #     for x in self.db_api.query(DistributionPackageIssue,
    #                                DistributionPackageIssueAdapter,
    #                                package=self._,
    #                                issue=cve._):
    #         yield x

    def add_cve(self, cve, affected=True, resolved=False):
        obj = DistributionPackageIssueAdapter.init(
            package=self._, issue=cve._
        )
        obj.set('affected', affected)
        obj.set('resolved', resolved)
        return obj

    def __str__(self):
        fields = []
        fields.append('{: <36}'.format(self.id))
        fields.append('{: <40}'.format(
            '{}-{}'.format(self.name, self.version)))
        fields.append('{: <25}'.format(str(self.distribution)))
        return ' | '.join(fields)

    def show(self, formatter):
        fields = (
            (('id',), 'ID'),
            (('source_package', 'project', 'name',), 'Name'),
            (('version',), 'Version'),
            (('source_package', '__str__'), 'Source Package'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for x in raw.get('advisories', []):
                cols.append('Advisory')
                data.append(x)

            for x in raw.get('cves', []):
                cols.append('CVE')
                data.append(x['__str__'])

            for x in raw.get('product_packages', []):
                cols.append('Product Package')
                data.append(x['__str__'])

        return cols, data, raw

    def export(self):
        data = super().export()

        data['advisories'] = [x.dict() for x in self.advisories]
        data['cves'] = [x.dict() for x in self.cves]
        data['product_packages'] = [x.dict() for x in self.product_packages]

        return data

    def dict(self, append={}):
        data = {
            'distribution': self.distribution.dict(),
            'source_package': self.source_package.dict(),
            'version': self.version,
        }
        super().dict(data=data, append=append)
        return data

    def update(self, **kwargs):
        if 'distribution' in kwargs:
            dist = DistributionAdapter(id=kwargs['distribution'])
            self._.distribution = dist._

        if 'version' in kwargs:
            self.set('version', kwargs['version'])

        self.commit()


class DistributionPackageIssueAdapter(GenericAdapter):
    @property
    def package(self):
        return DistributionPackageAdapter(self._.package)

    @property
    def distribution(self):
        return DistributionAdapter(self._.package.distribution)

    @property
    def affected(self):
        return self._.affected

    @affected.setter
    def affected(self, value):
        issue = CVEAdapter(self._.issue)
        self._.affected = value
        for x in self.package.product_packages:
            for y in x.issues(cve=issue):
                y.affected = value

    @property
    def status(self):
        return self._.status or '<empty>'

    @status.setter
    def status(self, value):
        self._.status = value

    def __str__(self):
        fields = []
        fields.append('{: <15}'.format(str(self._.issue.name)))
        fields.append('{: <20}'.format(str(self.package)))
        fields.append('{}'.format('A' if self.affected else 'N/A'))
        fields.append('{}'.format('R' if self.resolved else 'N/R'))
        return ' | '.join(fields)

    def dict(self, append={}):
        issue = CVEAdapter(self._.issue)
        data = {
            'issue': issue.dict(),
            'package': self.package.dict(),
            'affected': self.affected,
            'resolved': self.resolved,
            'status': self.status,
        }
        super().dict(data=data, append=append)
        return data


class ProductAdapter(GenericAdapter):
    @property
    def packages(self):
        for x in self._.packages:
            yield ProductPackageAdapter(x)

    @property
    def product_packages(self):
        for x in self._.packages:
            yield ProductPackageAdapter(x)

    def show(self, formatter=None):
        fields = (
            (('id',), 'ID'),
            (('name',), 'Name'),
            (('version',), 'Version'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for key, value in raw.get('packages', {}).items():
                cols.append('Distrirution')
                data.append('{}, {} packages'
                            .format(key, len(value)))

        return cols, data, raw

    def export(self):
        data = super().export()

        data['packages'] = {}

        for x in self.packages:
            data['packages'].setdefault(str(x.distribution), [])\
                .append(x.dict())

        return data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'version': self.version,
            'vendor': self.vendor,
        }
        super().dict(data=data, append=append)
        return data

    def __str__(self):
        return '{} {}'.format(self.name, self.version)


class ProductBinaryPackageAdapter(GenericAdapter):
    @property
    def product_package(self):
        return ProductPackageAdapter(self._.product_package)

    def dict(self, append={}):
        data = {
            'name': self._.name,
            'product_package': self.product_package.dict(),
        }
        super().dict(data=data, append=append)
        return data


class ProductPackageAdapter(GenericAdapter):
    @property
    def name(self):
        return self._.distribution_package.source_package.project.name

    @property
    def version(self):
        return self._.version

    @version.setter
    def version(self, value):
        self._.version = value

    @property
    def distribution_version(self):
        return self._.distribution_package.version

    @property
    def distribution_package(self):
        return DistributionPackageAdapter(self._.distribution_package)

    @distribution_package.setter
    def distribution_package(self, value):
        self._.distribution_package = value._

    @property
    def upstream_version(self):
        return self._.distribution_package.source_package.version

    @property
    def distribution(self):
        return DistributionAdapter(self._.distribution_package.distribution)

    @property
    def product_distribution(self):
        return DistributionAdapter(self._.distribution)

    @product_distribution.setter
    def product_distribution(self, value):
        self._.distribution = value._

    @property
    def product(self):
        return ProductAdapter(self._.product)

    @product.setter
    def product(self, value):
        self._.product = value._

    @property
    def source_package(self):
        return SourcePackageAdapter(self._.distribution_package.source_package)

    @property
    def binary_packages(self):
        for x in self._.binary_packages:
            yield ProductBinaryPackageAdapter(x)

    def issues(self, cve=None):
        filter_by = {'package': self._}
        if cve:
            filter_by['issue'] = cve._
        for x in self.db_api.query(ProductPackageIssue,
                                   ProductPackageIssueAdapter,
                                   filter_by=filter_by):
            yield x

    def add_cve(self, cve, affected=True, resolved=False):
        obj = ProductPackageIssueAdapter.init(
            package=self._, issue=cve._)
        obj.set('affected', affected)
        obj.set('resolved', resolved)
        return obj

    def add_binary_package(self, name):
        obj = ProductBinaryPackageAdapter.init(
            product_package=self._, name=name)
        return obj

    def __str__(self):
        fields = []
        fields.append('{: <36}'.format(self.id))
        fields.append('{: <40}'.format(
            '{}-{}'.format(self.name, self.version)))
        fields.append('{: <15}'.format(str(self.product)))
        return ' | '.join(fields)

    @classmethod
    def update(cls, data={}):
        """
        :param data:
        :return:

        data = {
            "id": "",
            "source_package": "",
            "source_package_id": "",
            "spec_project": "",
            "source_project": "",
            "upstream_version": "",
            "package_origin": "",
            "distribution": {
                "alias": "",
                "name": "",
                "version": "",
                "arch": "",
            },
            "distribution_id": "",
            "product": {
                "name": "",
                "version": "",
            },
            "version": {
                "full_version": "",
            },
            "cves": [],
            "binary_packages": [],
        }
        """

        overrides_path = CONFIG.config.get('common', 'overrides')
        overrides = ConfigDir(os.path.join(overrides_path, 'projects'))
        re_sep = re.compile(r'[\\\/]')
        if 'source_package_id' in data:
            src_pkg = SourcePackageAdapter.init(
                id=data['source_package_id'])
        elif 'source_package' in data:
            name = re_sep.sub('|', data['source_project'])
            prj_data = overrides.match(name)
            prj_data.setdefault('name', name.split('|')[-1])
            prj_data.setdefault('type', None)
            cls.log.debug("{} --> {}".format(name, prj_data))

            prj = SourceProjectAdapter.init(name=prj_data['name'],
                                            alias=prj_data['name'],
                                            type=prj_data['type'])
            prj.update(prj_data)
            prj.refresh()
            if 'upstream_version' in data:
                src_pkg = SourcePackageAdapter.init(
                    project=prj,
                    version=data['upstream_version']
                )
            else:
                src_pkg = None
        else:
            src_pkg = None

        version = DebianVersion(data['version']['full_version'])
        if 'distribution_package_id' in data:
            dist_pkg = DistributionPackageAdapter(
                id=data['distribution_package_id'])
            src_pkg = dist_pkg.source_package
        else:
            if 'distribution_id' in data:
                dist = DistributionAdapter(id=data['distribution_id'])
            elif 'distribution' in data:
                dist = DistributionAdapter.load_by_alias(
                    alias=data['distribution']['alias'],
                )
            else:
                dist = None

            if dist:
                dist_pkg = DistributionPackageAdapter.init(
                    distribution=dist,
                    source_package=src_pkg,
                    version=version.version,
                )
            else:
                dist_pkg = None

        product_dist = DistributionAdapter.load_by_alias(
            data.get('product_distribution', {}).get('alias', None))

        if 'product_id' in data:
            product = ProductAdapter(id=data['product_id'])
        elif 'product' in data:
            product = ProductAdapter.init(
                name=data['product']['name'],
                version=data['product']['version']
            )
            if 'alias' in data['product']:
                product.add_property(name='alias',
                                     value=data['product']['alias'])
        else:
            product = None

        if 'id' in data:
            product_pkg = ProductPackageAdapter(id=data['id'])
            product_pkg.product = product
            product_pkg.distribution_package = dist_pkg
            product_pkg.version = version.full_version
            product_pkg.product_distribution = product_dist
        else:
            product_pkg = ProductPackageAdapter.init(
                product=product,
                distribution_package=dist_pkg,
                distribution=product_dist,
            )
            product_pkg.version = version.full_version

        if 'package_origin' in data:
            src_pkg.set_property(name='origin',
                                 value=data['package_origin'])

        if 'spec_project' in data:
            product_pkg.set_property(name='spec_project',
                              value=data['spec_project'])

        if 'source_project' in data:
            product_pkg.set_property(name='source_project',
                              value=data['source_project'])

        for patch_name in data.get('patches', []):
            matches = re.findall(
                r'[Cc][Vv][Ee]-((?:\d{4,}|[_-])+)[\._-]',
                patch_name)
            for m in matches:
                parts = m.split('-')
                cve_year = parts.pop(0)
                for cve_number in parts:
                    if cve_number == '':
                        continue
                    cve_name = 'CVE-{}-{}'.format(cve_year, cve_number)
                    cve = CVEAdapter.init(name=cve_name)
                    src_pkg.add_cve(cve)
                    dist_pkg.add_cve(cve, resolved=True)
                    product_pkg.add_cve(cve, resolved=True)

        for item in data.get('binary_packages'):
            product_pkg.add_binary_package(item['name'])

        product_pkg.commit()

    def show(self, formatter=None):
        fields = (
            (('id',), 'ID'),
            (('distribution_package', '__str__'), 'Distribution Package'),
            (('distribution_package', 'source_package', '__str__'),
            'Source Package'),
            (('distribution_package', 'source_package', 'project', 'name'),
            'Name'),
            (('version',), 'Version'),
            (('distribution','__str__'), 'Distribution'),
            (('product', '__str__'), 'Product'),
            (('product_distribution', '__str__'), 'Product Distribution'),
        )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for x in raw.get('issues', []):
                cols.append('CVE')
                data.append(x['__str__'])

            # for x in raw.get('binary_packages', []):
            #     cols.append('Package')
            #     data.append(x['name'])

        return cols, data, raw

    def export(self):
        data = super().export()

        data['binary_packages'] = [
            x.dict() for x in self.binary_packages
        ]

        data['issues'] = [
            x.dict() for x in self.issues()
        ]

        return data

    def dict(self, append={}):
        data = {
            'distribution': self.distribution.dict(),
            'distribution_package': self.distribution_package.dict(),
            'product': self.product.dict(),
            'product_distribution': self.product_distribution.dict(),
            'version': self.version,
        }
        super().dict(data=data, append=append)
        return data


class ProductPackageIssueAdapter(GenericAdapter):
    @property
    def package(self):
        return ProductPackageAdapter(self._.package)

    @property
    def product(self):
        return ProductAdapter(self._.package.product)

    @property
    def issue(self):
        return CVEAdapter(self._.issue)

    @property
    def affected(self):
        return self._.affected

    @affected.setter
    def affected(self, value):
        self._.affected = value

    @property
    def status(self):
        return self._.status or '<empty>'

    @status.setter
    def status(self, value):
        self._.status = value

    def __str__(self):
        fields = []
        fields.append('{: <15}'.format(str(self._.issue.name)))
        fields.append('{: <20}'.format(str(self.package)))
        fields.append('{}'.format('A' if self.affected else 'N/A'))
        fields.append('{}'.format('R' if self.resolved else 'N/R'))
        return ' | '.join(fields)

    def dict(self, append={}):
        # issue = CVEAdapter(self._.issue)
        data = {
            'issue': self.issue.dict(),
            'package': self.package.dict(),
            'affected': self.affected,
            'resolved': self.resolved,
            'status': self.status,
        }
        super().dict(data=data, append=append)
        return data


class SourcePackageAdapter(GenericAdapter):
    def issues(self, cve=None):
        filter_by = {'package': self._}
        if cve:
            filter_by['issue'] = cve._
        for x in self.db_api.query(SourcePackageIssue,
                                   SourcePackageIssueAdapter,
                                   filter_by=filter_by):
            yield x

    # def issues(self, cve):
    #     for x in self.db_api.query(SourcePackageIssue,
    #                                SourcePackageIssueAdapter,
    #                                package=self._,
    #                                issue=cve._):
    #         yield x

    @property
    def cves(self):
        for x in self._.issues:
            yield SourcePackageIssueAdapter(x)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def distributions(self):
        for x in self._.distribution_packages:
            yield DistributionAdapter(x.distribution), x.version

    @property
    def distribution_packages(self):
        for x in self._.distribution_packages:
            yield DistributionPackageAdapter(x)

    @property
    def product_packages(self):
        for x in self.distribution_packages:
            for y in x.product_packages:
                yield ProductPackageAdapter(y)

    @property
    def packages(self):
        dp = None
        for dp in self.distribution_packages:
            pp = None
            for pp in dp.product_packages:
                yield self, dp, pp
            else:
                if pp is None:
                    yield self, dp, pp
        else:
            if dp is None:
                yield self, dp, pp

    @property
    def name(self):
        return self._.project.name

    @property
    def project(self):
        return SourceProjectAdapter(self._.project)

    def add_cve(self, cve, affected=True, resolved=False):
        obj = SourcePackageIssueAdapter.init(
            package=self._, issue=cve._)
        obj.set('affected', affected)
        obj.set('resolved', resolved)
        return obj

    def __str__(self):
        fields = []
        fields.append('{: <36}'.format(self.id))
        fields.append('{} {}'.format(self.name, self.version))
        return ' | '.join(fields)

    def show(self, formatter=None):
        fields = ((('id',), 'ID'), (('project', 'name',), 'Name'),
                  (('version',), 'Version'), )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for x in raw.get('advisories', []):
                cols.append('Advisory')
                data.append(x['name'])

            for x in raw.get('cves', []):
                cols.append('CVE')
                data.append(x['issue']['name'])

            for x in raw.get('distribution_packages', []):
                cols.append('Distribution Package')
                data.append(x['__str__'])

            for x in raw.get('product_packages', []):
                cols.append('Product Package')
                data.append(x['__str__'])

        return cols, data, raw

    def export(self):
        data = super().export()

        data['advisories'] = [x.dict() for x in self.advisories]
        data['cves'] = [x.dict() for x in self.cves]
        data['project'] = self.project.dict()

        data['distribution_packages'] = []
        data['product_packages'] = []

        for x in self.distribution_packages:
            data['distribution_packages'].append(x.dict())
            for y in x.product_packages:
                data['product_packages'].append(y.dict())

        return data

    def dict(self, append={}):
        data = {
            'version': self.version,
            'project': self.project.dict(),
        }
        super().dict(data=data, append=append)
        return data


class SourcePackageIssueAdapter(GenericAdapter):
    @property
    def package(self):
        return SourcePackageAdapter(self._.package)

    @property
    def affected(self):
        return self._.affected

    @affected.setter
    def affected(self, value):
        issue = CVEAdapter(self._.issue)
        self._.affected = value
        for x in self.package.distribution_packages:
            for y in x.issues(cve=issue):
                y.affected = value

    @property
    def status(self):
        return self._.status or '<empty>'

    @status.setter
    def status(self, value):
        self._.status = value

    def __str__(self):
        fields = []
        fields.append('{: <15}'.format(str(self._.issue.name)))
        fields.append('{: <40}'.format(str(self.package)))
        fields.append('{}'.format('A' if self.affected else 'N/A'))
        fields.append('{}'.format('R' if self.resolved else 'N/R'))
        return ' | '.join(fields)

    def dict(self, append={}):
        issue = CVEAdapter(self._.issue)
        data = {
            'issue': issue.dict(),
            'package': self.package.dict(),
            'affected': self.affected,
            'resolved': self.resolved,
            'status': self.status,
        }
        super().dict(data=data, append=append)
        return data


class SourceProjectAdapter(GenericAdapter):
    @property
    def packages(self):
        sp = None
        for sp in self.source_packages:
            dp = None
            for dp in sp.distribution_packages:
                pp = None
                for pp in dp.product_packages:
                    yield sp, dp, pp
                else:
                    if pp is None:
                        yield sp, dp, pp
            else:
                if dp is None:
                    yield sp, dp, pp
        else:
            if sp is None:
                yield sp, dp, pp

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield SourcePackageAdapter(x)

    @property
    def distribution_packages(self):
        for x in self.source_packages:
            for y in x.distribution_packages:
                yield y

    @property
    def product_packages(self):
        for x in self.distribution_packages:
            for y in x.product_packages:
                yield y

    @property
    def product_package_issues(self):
        for x in self.product_packages:
            for y in x.issues():
                yield y

    @property
    def cpes(self):
        for x in self._.cpes:
            yield CPEAdapter(x)

    def add_cpe_wfn(self, wfn):
        cpe = CPEAdapter.init(part=str(wfn.get('part')),
                              vendor=str(wfn.get('vendor')),
                              product=str(wfn.get('product'))
                              )
        self._.cpes.add(cpe._)

    def add_alias(self, alias):
        if alias.lower() != self.name.lower():
            self.add_property('alias', alias)

    def show(self, formatter=None):
        fields = ((('id',), 'ID'),
                  (('name',), 'Name'),
                  (('type', ), 'Type'),
                  (('homepage', ), 'Homepage'),
                  (('summary', ), 'Summary'), )
        cols, data, raw = super().show(fields=fields, formatter=formatter)

        if formatter == 'TableFormatter':
            for x in raw.get('source_packages', []):
                cols.append('Source Package')
                data.append(x['__str__'])

            for x in raw.get('distribution_packages', []):
                cols.append('Distribution Package')
                data.append(x['__str__'])

            for x in raw.get('product_packages', []):
                cols.append('Product Package')
                data.append(x['__str__'])

        return cols, data, raw

    def export(self):
        data = super().export()

        sps = set()
        dps = set()
        pps = set()
        for sp, dp, pp in self.packages:
            sps.add(sp)
            dps.add(dp)
            pps.add(pp)

        data['source_packages'] = [x.dict() for x in sps if x is not None]
        data['distribution_packages'] = [x.dict() for x in dps if x is not None]
        data['product_packages'] = [x.dict() for x in pps if x is not None]

        return data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'summary': self.summary,
            'type': self.type,
            'homepage': self.homepage,
        }
        super().dict(data=data, append=append)
        return data

    def update(self, data):
        for key in ['description', 'homepage']:
            value = data.get(key, None)
            if value:
                self.set(key, value)
        # self.commit()

    def refresh(self):
        last_refreshed = self.get_property('last_refreshed', as_scalar=True,
                                           default=None)
        if last_refreshed:
            last_refreshed_str = str(
                datetime.datetime.fromtimestamp(float(last_refreshed.value)))
            self.log.info("'{}' was refreshed at '{}'"
                          .format(self.name, last_refreshed_str))
            return
        project_type = self.get('type', None)
        if project_type == 'pypi':
            homepage = 'https://pypi.python.org/pypi/{}'.format(self.name)
            url = '{}/json'.format(homepage)
            http = urllib3.PoolManager()
            response = http.request('GET', url)
            if response.status in [200, 301]:
                data = json.loads(response.data.decode('utf-8'))
                info = data.get('info', {})
                self.add_alias(info.get('name', self.name))
                self.set('homepage', info.get('package_url', homepage))
                self.set('summary', info.get('summary', ''))
                self.set_property('last_refreshed', str(time.time()))
        elif project_type == 'rubygem':
            url = 'https://rubygems.org/api/v1/gems/{}.json'.format(self.name)
            http = urllib3.PoolManager()
            response = http.request('GET', url)
            if response.status in [200, 301]:
                data = json.loads(response.data.decode('utf-8'))
                self.add_alias(data.get('name', self.name))
                self.set('homepage', data.get('project_uri', ''))
                self.set('summary', data.get('info', ''))
                self.set_property('last_refreshed', str(time.time()))
        # self.commit()

    def __str__(self):
        s = []
        s.append(self.name)
        if self.type:
            s.append('({})'.format(self.type))
        return ' '.join(s)
