
import logging
import re

from lib.db.models import *
from lib.db.api import DBAPI

from sqlalchemy.orm.exc import NoResultFound

DISTRIBUTION_ALIASES = {
    ('trusty', ): {
        'name': 'Ubuntu',
        'version': '14.04',
    },
    ('xenial', ): {
        'name': 'Ubuntu',
        'version': '16.04',
    },
    ('el6', ): {
        'name': 'RedHat',
        'version': '6',
    },
    ('el7', ): {
        'name': 'RedHat',
        'version': '7',
    }
}


class GenericAdapter(object):
    _catalog = {}

    def __new__(cls, instance=None, *args, **kwargs):
        if instance:
            return cls._catalog.setdefault(instance, super().__new__(cls))
        return super().__new__(cls)

    def __init__(self, instance=None):
        self.db_api = DBAPI()
        if instance:
            self.log.debug("Adding instance {} to session {}".format(
                instance, self.db_api.session
            ))
            self._ = instance
            self.db_api.session.add(self._)
            self.db_api.session.flush()
        else:
            self._ = None

    def __getattr__(self, item):
        return self.__dict__.get(item, getattr(self._, item))

    def try_load(self, *args, **kwargs):
        for filter in self._filters:
            passed = True
            _kwargs = {}
            for key in filter:
                if key in kwargs:
                    _kwargs[key] = kwargs[key]
                else:
                    passed = False
                    break
            if passed:
                self.load(**_kwargs)
                return

        raise Exception("No filter pair matched in try_load(). "
                        "Available pairs '{}'".format(self._filters))

    def load(self, **kwargs):
        query = self.db_api.session.query(self._class)
        self._ = query.filter_by(**kwargs).one()
        self._catalog.setdefault(self._, self)
        self.log.debug("load(): got object {}".format(self._))

    def initialize(self, *args, **kwargs):
        try:
            self.load(**kwargs)
            return
        except NoResultFound:
            self._ = self.db_api.get(self._class, **kwargs)
        except:
            raise
        self.log.debug("initialize(): got object {}".format(self._))

    def search(self, *args, **kwargs):
        query = self.db_api.session.query(self._class)
        for name, value in kwargs.items():
            query = query.filter(getattr(self._class, name) == value)
        return query.all()

    def add_property(self, name, value, unique=False):
        cls_name = self._.__class__.__name__
        property_cls = eval(cls_name + 'Property')

        if unique:
            prop = self.db_api.get(property_cls, parent_id=self._.id,
                                   name=name)
            if isinstance(prop, list):
                raise Exception("Multiple properties found but not allowed.")
            prop.value = value
        else:
            prop = self.db_api.get(property_cls, parent_id=self._.id,
                                   name=name, value=value)

        self._.properties.add(prop)

    def commit(self):
        self.db_api.session.commit()

    def __repr__(self):
        return 'Class: {}, ID: {}'.format(self.__class__.__name__, self._.id)

    def dict(self, **kwargs):
        data = kwargs.get('data', {})
        append = kwargs.get('append', {})
        p = {}
        for item in self.properties:
            p.setdefault(item.name, []).append(item.value)
        for k, v in p.items():
            if len(v) == 1:
                p[k] = v[0]
        data.update({
            'class': self.__class__.__name__,
            'id': self.id,
        })
        data.update(append)
        data.update({
            'property': p
        })
        return data


class AdvisoryAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Advisory
        self._filters = (
            ('id',),
            ('name',),
        )
        super().__init__(*args, **kwargs)

    @property
    def cves(self):
        for x in self._.cves:
            yield CVEAdapter(x)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield SourcePackageAdapter(x)

    @property
    def distribution_packages(self):
        for x in self._.distribution_packages:
            yield DistributionPackageAdapter(x)

    def add_cve(self, cve):
        self._.cves.add(cve._)

    def add_source_package(self, name, version):
        prj = ProjectAdapter()
        prj.initialize(name=name)

        pkg = SourcePackageAdapter()
        pkg.initialize(project=prj._, version=version)

        self._.source_packages.add(pkg._)

        return pkg

    def add_package(self, package):
        self._.distribution_packages.add(package._)

    def commit(self):
        super().commit()

    def update(self, data={}):
        url = data.get('url', None)
        if url:
            self.url = url

        subject = data.get('subject', None)
        if subject:
            self.subject = subject

        for cve_name, cve_data in data.get('cves', {}).items():
            cve = CVEAdapter()
            cve.initialize(name=cve_name)

            cve.subject = cve_data.get('subject', '')
            url = cve_data.get('url', None)
            if url:
                cve.add_property(
                    name='URL',
                    value=url
                )

            for url in cve_data.get('references', []):
                cve.add_property(name='Reference', value=url)

            self._.cves.add(cve._)

        for pkg_data in data.get('packages', []):
            prj = ProjectAdapter()
            prj.initialize(name=pkg_data['name'])

            pkg = SourcePackageAdapter()
            pkg.initialize(project=prj._,
                           version=pkg_data['upstream_version'])

            self._.source_packages.add(pkg._)

            dist = DistributionAdapter()
            dist.initialize(alias=pkg_data['dist'])

            dist_pkg = DistributionPackageAdapter()
            dist_pkg.initialize(source_package=pkg._,
                                distribution=dist._,
                                version=pkg_data['full_version'])

            self._.distribution_packages.add(dist_pkg._)

        for cve in self._.cves:
            for pkg in self._.source_packages:
                cve.source_packages.add(pkg)

            for pkg in self._.distribution_packages:
                obj = DistributionPackageIssueAdapter()
                obj.initialize(package=pkg, issue=cve)

        #self.commit()

    def export(self, formatter=None):
        cols = ['id', 'name', 'subject', 'url']
        data = [self.id, self.name, self.subject, self.url]

        fmt = '{0[name]}'
        for item in self.source_packages:
            cols.append('Package')
            data.append(fmt.format(item.dict()))

        fmt = '{0[name]}-{0[version]} ' \
              '({0[distribution][name]} ' \
              '{0[distribution][version]} ' \
              '{0[distribution][arch]})'
        for item in self.distribution_packages:
            cols.append('Distribution package')
            data.append(fmt.format(item.dict()))

        fmt = '{0[name]}'
        for item in self.cves:
            cols.append('CVE')
            data.append(fmt.format(item.dict()))

        for x in self.properties:
            cols.append('Property:{}'.format(x.name))
            data.append(x.value)

        return cols, data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'subject': self.subject,
            'url': self.url,
        }
        super().dict(data=data, append=append)
        return data


class CVEAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = CVE
        self._filters = (
            ('id',),
            ('name',),
        )
        super().__init__(*args, **kwargs)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield SourcePackageIssueAdapter(x)

    @property
    def urls(self):
        for x in self.properties:
            if x.name.lower() == 'url':
                yield x.value

    @property
    def distribution_issues(self):
        for x in self._.distribution_packages:
            yield DistributionPackageIssueAdapter(x)

    @property
    def product_issues(self):
        for x in self._.product_packages:
            yield ProductPackageIssueAdapter(x)

    def export(self, formatter=None):
        cols = ['id', 'name', 'subject', ]
        data = [self.id, self.name, self.subject, ]

        advisories = [x.name for x in self.advisories]

        pkgs = [x for x in self.source_packages]

        if formatter == 'TableFormatter':
            for item in advisories:
                cols.append('Advisory')
                data.append(item)

            for item in pkgs:
                cols.append('Affects')
                data.append(str(item))

            for prop in self.properties:
                cols.append('Property:{}'.format(prop.name))
                data.append(prop.value)

            for x in self.distribution_issues:
                cols.append('Affects Distribution')
                data.append(str(x))

            for x in self.product_issues:
                cols.append('Affects Product')
                data.append(str(x))
        else:
            cols.append('advisories')
            data.append(advisories)

            cols.append('affects')
            data.append([x.dict() for x in pkgs])

            cols.append('affected_distributions')
            data.append([x.dict() for x in self.distribution_issues])

            cols.append('affected_products')
            data.append([x.dict() for x in self.product_issues])

        return cols, data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'subject': self.subject,
        }
        super().dict(data=data, append=append)
        return data


class DistributionAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Distribution
        self._filters = (
            ('id',),
            ('name', 'version', 'arch',),
        )
        super().__init__(*args, **kwargs)

    @property
    def source_packages(self):
        for x in self._.packages:
            yield SourcePackageAdapter(x.source_package), x.version

    def add_package(self, source_package, version=None):
        obj = DistributionPackageAdapter()
        obj.initialize(
            source_package=source_package._,
            distribution=self._,
            version=version
        )
        return obj

    def initialize(self, *args, **kwargs):
        if 'alias' in kwargs:
            alias = kwargs.pop('alias')
            for aliases, data in DISTRIBUTION_ALIASES.items():
                if alias in aliases:
                    alias = None
                    kwargs.update(data)
                    break
            if alias:
                raise Exception("Distribution alias '{}' not known"
                                .format(alias))
        super().initialize(*args, **kwargs)

    def __str__(self):
        return '{} {} ({})'.format(self._.name, self._.version, self._.arch)

    def export(self, formatter=None):
        cols = ['id', 'name', 'version', 'arch']
        data = [self.id, self.name, self.version, self.arch]

        pkgs = []
        for pkg, ver in self.source_packages:
            pkgs.append((pkg.id, pkg.name, pkg.version, ver))
        pkgs.sort(key=lambda x: ''.join((x[1], x[3])))

        for pkg in pkgs:
            cols.append('Package')
            data.append(pkg)

        return cols, data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'version': self.version,
            'arch': self.arch,
        }
        super().dict(data=data, append=append)
        return data


class DistributionPackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = DistributionPackage
        self._filters = (
            ('id',),
            ('source_package', 'distribution', 'version'),
        )
        super().__init__(*args, **kwargs)

    @property
    def name(self):
        return self._.source_package.project.name

    @property
    def version(self):
        return self._.version or '<empty>'

    @property
    def distribution(self):
        return DistributionAdapter(self._.distribution)

    @property
    def products(self):
        for x in self._.products:
            yield ProductAdapter(x.product)

    @property
    def product_packages(self):
        for x in self._.product_packages:
            yield ProductPackageAdapter(x)

    @property
    def source_package(self):
        return SourcePackageAdapter(self._.source_package)

    @property
    def cves(self):
        for x in self._.issues:
            yield DistributionPackageIssueAdapter(x)

    def add_cve(self, cve, status='Not Fixed'):
        # self.source_package.add_cve(cve)
        obj = DistributionPackageIssueAdapter()
        obj.initialize(package=self._, issue=cve._)
        obj.status = status
        return obj

    def __str__(self):
        fields = []
        fields.append('{: <20} '.format(
            '{}-{}'.format(self.name, self.version)))
        fields.append(' {: <10}'.format(str(self.distribution)))
        return '|'.join(fields)

    def export(self, formatter):
        cols = ['id', 'name', 'version', ]
        data = [self.id, self.name, self.version, ]

        for prop in self.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        advisories = [x.dict() for x in self.advisories]
        # advisories.sort(key=lambda x: x['name'])

        cves = [x for x in self.cves]

        if formatter == 'TableFormatter':
            cves.sort(key=lambda x: x.issue.name)
            # distributions.sort(key=lambda x: x['name'])

            for item in advisories:
                cols.append('Advisory')
                data.append('{0[name]}'.format(item))

            for item in cves:
                cols.append('CVE')
                data.append(str(item))

            # for item in prod_packages:
            #     cols.append('Product package')
            #     data.append(str(item))
        else:
            cols.append('advisories')
            data.append(advisories)

            cols.append('cves')
            data.append([x.dict() for x in cves])

            # cols.append('Distributions')
            # data.append(distributions)

            # cols.append('product_packages')
            # data.append([x.dict() for x in prod_packages])

        return cols, data

    def dict(self, append={}):
        data = {
            'distribution': self.distribution.dict(),
            'source_package': self.source_package.dict(),
            'version': self.version,
        }
        super().dict(data=data, append=append)
        return data


class DistributionPackageIssueAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = DistributionPackageIssue
        self._filters = (
            ('id',),
            ('package', 'issue', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def package(self):
        return DistributionPackageAdapter(self._.package)

    @property
    def distribution(self):
        return DistributionAdapter(self._.package.distribution)

    @property
    def status(self):
        return self._.status or '<empty>'

    @status.setter
    def status(self, value):
        self._.status = value

    def __str__(self):
        fields = []
        fields.append('{: <15} '.format(str(self._.issue.name)))
        fields.append(' {: <20} '.format(str(self.package)))
        fields.append(' {: <10}'.format(self.status))
        return '|'.join(fields)

    def dict(self, append={}):
        issue = CVEAdapter(self._.issue)
        data = {
            'issue': issue.dict(),
            'package': self.package.dict(),
            'status': self.status,
        }
        super().dict(data=data, append=append)
        return data


class ProductAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Product
        self._filters = (
            ('id',),
            ('name', 'version', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def packages(self):
        for x in self._.packages:
            yield ProductPackageAdapter(x)

    def export(self, formatter=None):
        cols = ['id', 'name', 'version', ]
        data = [self.id, self.name, self.version, ]

        packages = {}
        for pkg in self.packages:
            packages.setdefault(pkg.distribution, []).append(pkg)

        for dist, pkgs in packages.items():
            cols.append('Distribution')
            data.append('{}, {} packages'.format(str(dist), len(pkgs)))

        return cols, data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'version': self.version,
            'vendor': self.vendor,
        }
        super().dict(data=data, append=append)
        return data

    def __str__(self):
        return '{} {}'.format(self.name, self.version)


class ProductBinaryPackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = ProductBinaryPackage
        self._filters = (
            ('id', ),
            ('product_package', 'name', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def product_package(self):
        return ProductPackageAdapter(self._.product_package)

    def dict(self, append={}):
        data = {
            'name': self._.name,
            'product_package': self.product_package.dict(),
        }
        super().dict(data=data, append=append)
        return data


class ProductPackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = ProductPackage
        self._filters = (
            ('id',),
            ('product', 'package', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def name(self):
        return self._.distribution_package.source_package.project.name

    @property
    def version(self):
        return self._.version

    @property
    def distribution_version(self):
        return self._.distribution_package.version

    @property
    def distribution_package(self):
        return DistributionPackageAdapter(self._.distribution_package)

    @property
    def upstream_version(self):
        return self._.distribution_package.source_package.version

    @property
    def distribution(self):
        return DistributionAdapter(self._.distribution_package.distribution)

    @property
    def product(self):
        return ProductAdapter(self._.product)

    @property
    def source_package(self):
        return SourcePackageAdapter(self._.distribution_package.source_package)

    @property
    def binary_packages(self):
        for x in self._.binary_packages:
            yield ProductBinaryPackageAdapter(x)

    def add_cve(self, cve, status='Not Fixed'):
        # self.source_package.add_cve(cve)
        obj = ProductPackageIssueAdapter()
        obj.initialize(package=self._, issue=cve._)
        obj.status = status
        return obj

    def add_binary_package(self, name):
        obj = ProductBinaryPackageAdapter()
        obj.initialize(product_package=self._, name=name)
        return obj

    def __str__(self):
        fields = []
        fields.append('{: <20} '.format(
            '{}-{}'.format(self.name, self.version)))
        fields.append(' {: <15} '.format(str(self.product)))
        fields.append(' {: <10}'.format(str(self.distribution)))
        return '|'.join(fields)

    def update(self, data={}):
        prj = ProjectAdapter()
        prj.initialize(
            name=data['source_package']
        )
        prj.add_property(name='spec_project',
                         value=data['spec_project'])
        prj.add_property(name='source_project',
                         value=data['source_project'])

        spkg = SourcePackageAdapter()
        spkg.initialize(
            project=prj,
            version=data['upstream_version']
        )
        spkg.add_property(name='origin',
                          value=data['package_origin'])

        dist = DistributionAdapter()
        dist.initialize(
            alias=data['distribution']['alias'],
        )

        product = ProductAdapter()
        product.initialize(
            name=data['product']['name'],
            version=data['product']['version']
        )

        version = {
            'epoch': 0,
            'version': '',
            'revision': '',
            'distribution': '',
            'suffix': '',
            'full_version': data['version']['full_version'],
        }

        l = version['full_version'].split(':', maxsplit=1)
        if len(l) == 2:
            version['epoch'] = l.pop(0)
        re_version = r'^(.*)(~u\d{2}\.?\d{2})(.*)$'
        match = re.match(re_version, l[0])
        if match:
            version['version'] = match.group(1)
            version['distribution'] = match.group(2)
            version['suffix'] = match.group(3)
        else:
            version['version'] = l[0]
        l = version['version'].split('-', maxsplit=1)
        if len(l) == 2:
            version['version'] = l.pop(0)
        version['revision'] = l[0]

        dpkg = DistributionPackageAdapter()
        dpkg.initialize(
            distribution=dist,
            source_package=spkg,
            version=version['version'],
        )

        self.initialize(
            product=product,
            distribution_package=dpkg,
            version=data['version']['full_version']
        )

        self.add_property(name='spec_project',
                          value=data['spec_project'])
        self.add_property(name='source_project',
                          value=data['source_project'])

        for name in data.get('cves', []):
            cve = CVEAdapter()
            cve.initialize(name=name)
            spkg.add_cve(cve)
            dpkg.add_cve(cve, status='FIXED')
            self.add_cve(cve, status='FIXED')

        for item in data.get('binary_packages'):
            self.add_binary_package(item['name'])

    def export(self, formatter=None):
        # cols = ['id', 'name', 'version', 'distribution', 'product']
        # data = [self.id, self.name, self.version, str(self.distribution),
        #         str(self.product)]
        cols = []
        data = []

        if formatter == 'TableFormatter':
            cols = ['ID', 'Name', 'Version', 'Distribution', 'Product']
            data = [self.id, self.name, self.version, str(self.distribution),
                    str(self.product)]

            for x in self.binary_packages:
                cols.append('Package')
                data.append(x.name)

            for x in self.properties:
                cols.append('Property:{}'.format(x.name))
                data.append(x.value)
        else:
            # cols.append('packages')
            # data.append([x.name for x in self.binary_packages])

            for k, v in self.dict().items():
                cols.append(k)
                data.append(v)

        return cols, data

    def dict(self, append={}):
        data = {
            'distribution': self.distribution.dict(),
            'distribution_package': self.distribution_package.dict(),
            'product': self.product.dict(),
            'version': self.version,
        }
        super().dict(data=data, append=append)
        return data


class ProductPackageIssueAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = ProductPackageIssue
        self._filters = (
            ('id',),
            ('package', 'issue', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def package(self):
        return ProductPackageAdapter(self._.package)

    @property
    def product(self):
        return ProductAdapter(self._.package.product)

    @property
    def status(self):
        return self._.status or '<empty>'

    @status.setter
    def status(self, value):
        self._.status = value

    def __str__(self):
        fields = []
        fields.append('{: <15} '.format(str(self._.issue.name)))
        fields.append(' {: <20} '.format(str(self.package)))
        fields.append(' {: <10}'.format(self.status))
        return '|'.join(fields)

    def dict(self, append={}):
        issue = CVEAdapter(self._.issue)
        data = {
            'issue': issue.dict(),
            'package': self.package.dict(),
            'status': self.status,
        }
        super().dict(data=data, append=append)
        return data


class ProjectAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = SourceProject
        self._filters = (
            ('id',),
            ('name', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def packages(self):
        for x in self._.source_packages:
            yield SourcePackageAdapter(x)

    def export(self, formatter=None):
        cols = ['id', 'name' ]
        data = [self.id, self.name ]

        for item in self.packages:
            cols.append('Source Package')
            data.append(str(item))

        for prop in self.properties:
            cols.append('Property:{}'.format(prop.name))
            data.append(prop.value)

        return cols, data

    def dict(self, append={}):
        data = {
            'name': self.name,
            'description': self.description,
        }
        super().dict(data=data, append=append)
        return data


class SourcePackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = SourcePackage
        self._filters = (
            ('id',),
            ('project', 'version'),
        )
        super().__init__(*args, **kwargs)

    @property
    def cves(self):
        for x in self._.issues:
            yield SourcePackageIssueAdapter(x)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def distributions(self):
        for x in self._.distribution_packages:
            yield DistributionAdapter(x.distribution), x.version

    @property
    def distribution_packages(self):
        for x in self._.distribution_packages:
            yield DistributionPackageAdapter(x)

    @property
    def name(self):
        return self._.project.name

    @property
    def project(self):
        return ProjectAdapter(self._.project)

    def add_cve(self, cve, status='Affected'):
        obj = SourcePackageIssueAdapter()
        obj.initialize(package=self._, issue=cve._)
        obj.status = status
        return obj

    def __str__(self):
        return "{} {}".format(self.name, self.version)

    def export(self, formatter=None):
        advisories = [x.dict() for x in self.advisories]
        advisories.sort(key=lambda x: x.name)

        cves = [x for x in self.cves]
        cves.sort(key=lambda x: x.issue.name)

        dist_packages = []
        prod_packages = []

        for x in self.distribution_packages:
            dist_packages.append(x)
            for y in x.product_packages:
                prod_packages.append(y)

        if formatter == 'TableFormatter':
            cols = ['ID', 'Name', 'Version', ]
            data = [self.id, self.name, self.version, ]

            for prop in self.properties:
                cols.append('Property:{}'.format(prop.name))
                data.append(prop.value)

            for item in advisories:
                cols.append('Advisory')
                data.append('{0[name]}'.format(item))

            for item in cves:
                cols.append('CVE')
                data.append(str(item))

            for item in dist_packages:
                cols.append('Distribution package')
                data.append(str(item))

            for item in prod_packages:
                cols.append('Product package')
                data.append(str(item))
        else:
            cols = ['id', 'name', 'version', ]
            data = [self.id, self.name, self.version, ]

            for prop in self.properties:
                cols.append('property:{}'.format(prop.name))
                data.append(prop.value)

            cols.append('advisories')
            data.append(advisories)

            cols.append('cves')
            data.append([x.dict() for x in cves])

            cols.append('distribution_packages')
            data.append([x.dict() for x in dist_packages])

            cols.append('product_packages')
            data.append([x.dict() for x in prod_packages])

        return cols, data

    def dict(self, append={}):
        data = {
            'version': self.version,
            'project': self.project.dict(),
        }
        super().dict(data=data, append=append)
        return data


class SourcePackageIssueAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = SourcePackageIssue
        self._filters = (
            ('id',),
            ('package', 'issue', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def package(self):
        return SourcePackageAdapter(self._.package)

    @property
    def status(self):
        return self._.status or '<empty>'

    @status.setter
    def status(self, value):
        self._.status = value

    def __str__(self):
        fields = []
        fields.append('{: <15} '.format(str(self._.issue.name)))
        fields.append(' {: <20} '.format(str(self.package)))
        fields.append(' {: <10}'.format(self.status))
        return '|'.join(fields)

    def dict(self, append={}):
        issue = CVEAdapter(self._.issue)
        data = {
            'issue': issue.dict(),
            'package': self.package.dict(),
            'status': self.status,
        }
        super().dict(data=data, append=append)
        return data
