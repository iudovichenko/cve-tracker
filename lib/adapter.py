
import logging

from lib.db.models import *
from lib.db.api import DBAPI


class GenericAdapter(object):
    def __init__(self, *args, **kwargs):
        self.db_api = DBAPI()
        if len(args):
            self._ = args[0]
            self.db_api.session.add(self._)
        else:
            self._ = None
        self.try_load(self._class, self._filters, **kwargs)

    def try_load(self, cls, filters, **kwargs):
        for filter in filters:
            passed = True
            _kwargs = {}
            for key in filter:
                if key in kwargs:
                    _kwargs[key] = kwargs[key]
                else:
                    passed = False
                    break
            if passed:
                self._ = self.db_api.get(cls, **kwargs)

        if self._ is None:
            self.search(**kwargs)

    def load(self, cls, **kwargs):
        query = self.db_api.session.query(cls)
        for name, value in kwargs.items():
            query = query.filter(getattr(cls, name) == value)
        self._ = query.one()

    def search(self, *args, **kwargs):
        raise Exception("Not implemented")

    def add_property(self, name, value, unique=False):
        cls_name = self._.__class__.__name__
        property_cls = eval(cls_name + 'Property')

        if unique:
            prop = self.db_api.get(property_cls, self._.id,
                                   name=name)
            if isinstance(prop, list):
                raise Exception("Multiple properties found but not allowed.")
            prop.value = value
        else:
            prop = self.db_api.get(property_cls, self._.id,
                                   name=name, value=value)

        if prop not in self._.properties:
            self._.properties.append(prop)

    @property
    def id(self):
        return self._.id


class PackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = SourcePackage
        self._filters = (
            ('id',),
            ('name', 'version'),
        )
        super(PackageAdapter, self).__init__(*args, **kwargs)

    @property
    def cves(self):
        for x in self._.cves:
            yield CVEAdapter(x.cve)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x.advisory)

    @property
    def distributions(self):
        for x in self._.distributions:
            yield DistributionAdapter(x.distribution), x.version

    @property
    def name(self):
        return self._.name

    @property
    def version(self):
        return self._.version

    @property
    def properties(self):
        return self._.properties


class CVEAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = CVE
        self._filters = (
            ('id',),
            ('name',),
        )
        super(CVEAdapter, self).__init__(*args, **kwargs)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x.advisory)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield PackageAdapter(x.source_package)

    @property
    def urls(self):
        for x in self.properties:
            if x.name.lower() == 'url':
                yield x.value

    @property
    def name(self):
        return self._.name

    @property
    def subject(self):
        return self._.subject

    @property
    def properties(self):
        return self._.properties


class DistributionAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Distribution
        self._filters = (
            ('id',),
            ('name', 'version', 'arch',),
        )
        super(DistributionAdapter, self).__init__(*args, **kwargs)

    @property
    def source_packages(self):
        for x in self._.packages:
            yield PackageAdapter(x.source_package), x.version

    @property
    def name(self):
        return self._.name

    @property
    def version(self):
        return self._.version

    @property
    def arch(self):
        return self._.arch

    @property
    def properties(self):
        return self._.properties


class AdvisoryAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Advisory
        self._filters = (
            ('id',),
            ('name',),
        )
        super(AdvisoryAdapter, self).__init__(*args, **kwargs)

    @property
    def cves(self):
        for x in self._.cves:
            yield CVEAdapter(x.cve)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield PackageAdapter(x.source_package)

    @property
    def name(self):
        return self._.name

    @property
    def subject(self):
        return self._.subject

    @property
    def url(self):
        return self._.url

    @property
    def properties(self):
        return self._.properties
