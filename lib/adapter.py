
import logging

from lib.db.models import *
from lib.db.api import DBAPI


DISTRIBUTION_ALIASES = {
    ('trusty', ): {
        'name': 'Ubuntu',
        'version': '14.04',
    },
    ('xenial', ): {
        'name': 'Ubuntu',
        'version': '16.04',
    },
    ('el6', ): {
        'name': 'RedHat',
        'version': '6',
    },
    ('el7', ): {
        'name': 'RedHat',
        'version': '7',
    }
}


class NoRecordsFound(Exception):
    pass


class MultipleRecordsFound(Exception):
    pass


class GenericAdapter(object):
    def __init__(self, instance=None):
        self.db_api = DBAPI()
        if instance:
            self.log.debug("Adding instance {} to session {}".format(
                instance, self.db_api.session
            ))
            self._ = instance
            self.db_api.session.add(self._)
            self.db_api.session.flush()
        else:
            self._ = None

    def try_load(self, *args, **kwargs):
        for filter in self._filters:
            passed = True
            _kwargs = {}
            for key in filter:
                if key in kwargs:
                    _kwargs[key] = kwargs[key]
                else:
                    passed = False
                    break
            if passed:
                self.load(**_kwargs)
                return

        raise Exception("No filter pair matched in try_load(). "
                        "Available pairs '{}'".format(self._filters))

    def load(self, **kwargs):
        query = self.db_api.session.query(self._class)
        for name, value in kwargs.items():
            query = query.filter(getattr(self._class, name) == value)
        res = query.all()
        if len(res) == 0:
            raise NoRecordsFound("No records found for '{}'"
                                 .format(kwargs))
        if len(res) > 1:
            raise MultipleRecordsFound("More than one records found for '{}'"
                                       .format(kwargs))
        self._ = query.one()
        self.log.debug("load(): got object {}".format(self._))

    def initialize(self, *args, **kwargs):
        try:
            self.load(**kwargs)
            return
        except NoRecordsFound:
            self._ = self.db_api.get(self._class, **kwargs)
        except:
            raise
        self.log.debug("initialize(): got object {}".format(self._))

    def search(self, *args, **kwargs):
        query = self.db_api.session.query(self._class)
        for name, value in kwargs.items():
            query = query.filter(getattr(self._class, name) == value)
        return query.all()

    def add_property(self, name, value, unique=False):
        cls_name = self._.__class__.__name__
        property_cls = eval(cls_name + 'Property')

        if unique:
            prop = self.db_api.get(property_cls, parent_id=self._.id,
                                   name=name)
            if isinstance(prop, list):
                raise Exception("Multiple properties found but not allowed.")
            prop.value = value
        else:
            prop = self.db_api.get(property_cls, parent_id=self._.id,
                                   name=name, value=value)

        self._.properties.add(prop)

    def get(self, name):
        return getattr(self._, name)

    def set(self, name, value):
        setattr(self._, name, value)

    def commit(self):
        self.db_api.session.commit()

    @property
    def id(self):
        return self._.id


class ProjectAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = SourceProject
        self._filters = (
            ('id',),
            ('name', ),
        )
        super().__init__(*args, **kwargs)


class SourcePackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = SourcePackage
        self._filters = (
            ('id',),
            ('name', 'version'),
        )
        super().__init__(*args, **kwargs)

    @property
    def cves(self):
        for x in self._.cves:
            yield CVEAdapter(x)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def distributions(self):
        for x in self._.distributions:
            yield DistributionAdapter(x.distribution), x.version

    @property
    def name(self):
        return self._.project.name

    @property
    def version(self):
        return self._.version

    @property
    def properties(self):
        return self._.properties


class DistributionPackageAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = DistributionPackage
        self._filters = (
            ('id',),
            ('source_package', 'distribution', 'version'),
        )
        super().__init__(*args, **kwargs)

    @property
    def name(self):
        return self._.source_package.project.name

    @property
    def version(self):
        return self._.version

    @property
    def distribution(self):
        return DistributionAdapter(self._.distribution)

    def __str__(self):
        return "{}-{} '{}'".format(self.name, self.version,
                                   str(self.distribution))

class CVEAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = CVE
        self._filters = (
            ('id',),
            ('name',),
        )
        super().__init__(*args, **kwargs)

    @property
    def advisories(self):
        for x in self._.advisories:
            yield AdvisoryAdapter(x)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield SourcePackageAdapter(x)

    @property
    def urls(self):
        for x in self.properties:
            if x.name.lower() == 'url':
                yield x.value

    @property
    def status(self):
        for x in self._.packages:
            yield DistributionPackageIssueAdapter(x)

    @property
    def name(self):
        return self._.name

    @property
    def subject(self):
        return self._.subject

    @property
    def properties(self):
        return self._.properties


class DistributionAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Distribution
        self._filters = (
            ('id',),
            ('name', 'version', 'arch',),
        )
        super().__init__(*args, **kwargs)

    @property
    def source_packages(self):
        for x in self._.packages:
            yield SourcePackageAdapter(x.source_package), x.version

    def add_package(self, source_package, version):
        obj = DistributionPackageAdapter()
        obj.initialize(
            source_package=source_package._,
            distribution=self._,
            version=version
        )
        return obj

    def initialize(self, *args, **kwargs):
        if 'alias' in kwargs:
            alias = kwargs.pop('alias')
            for aliases, data in DISTRIBUTION_ALIASES.items():
                if alias in aliases:
                    alias = None
                    kwargs.update(data)
                    break
            if alias:
                raise Exception("Distribution alias '{}' not known"
                                .format(alias))
        super().initialize(*args, **kwargs)

    @property
    def name(self):
        return self._.name

    @property
    def version(self):
        return self._.version

    @property
    def arch(self):
        return self._.arch

    @property
    def properties(self):
        return self._.properties

    def __str__(self):
        return '{} {} ({})'.format(self._.name, self._.version, self._.arch)


class AdvisoryAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = Advisory
        self._filters = (
            ('id',),
            ('name',),
        )
        super().__init__(*args, **kwargs)

    @property
    def cves(self):
        for x in self._.cves:
            yield CVEAdapter(x)

    @property
    def source_packages(self):
        for x in self._.source_packages:
            yield SourcePackageAdapter(x)

    @property
    def distribution_packages(self):
        for x in self._.distribution_packages:
            yield DistributionPackageAdapter(x)

    def add_cve(self, cve):
        self._.cves.add(cve._)

    def add_source_package(self, name, version):
        prj = ProjectAdapter()
        prj.initialize(name=name)

        pkg = SourcePackageAdapter()
        pkg.initialize(project=prj._, version=version)

        self._.source_packages.add(pkg._)

        return pkg

    def add_package(self, package):
        self._.distribution_packages.add(package._)

    def commit(self):
        super().commit()

    def update(self, data={}):
        url = data.get('url', None)
        if url:
            self.set('url', url)

        subject = data.get('subject', None)
        if subject:
            self.set('subject', subject)

        for cve_name, cve_data in data.get('cves', {}).items():
            cve = CVEAdapter()
            cve.initialize(name=cve_name)

            cve.set('subject', cve_data.get('subject', ''))
            url = cve_data.get('url', None)
            if url:
                cve.add_property(
                    name='URL',
                    value=url
                )

            for url in cve_data.get('references', []):
                cve.add_property(name='Reference', value=url)

            self._.cves.add(cve._)

        for pkg_data in data.get('packages', []):
            prj = ProjectAdapter()
            prj.initialize(name=pkg_data['name'])

            pkg = SourcePackageAdapter()
            pkg.initialize(project=prj._,
                           version=pkg_data['upstream_version'])

            self._.source_packages.add(pkg._)

            dist = DistributionAdapter()
            dist.initialize(alias=pkg_data['dist'])

            dist_pkg = DistributionPackageAdapter()
            dist_pkg.initialize(source_package=pkg._,
                                distribution=dist._,
                                version=pkg_data['full_version'])

            self._.distribution_packages.add(dist_pkg._)

        for cve in self._.cves:
            for pkg in self._.source_packages:
                cve.source_packages.add(pkg)

            for pkg in self._.distribution_packages:
                obj = DistributionPackageIssueAdapter()
                obj.initialize(package=pkg, issue=cve)

        #self.commit()

    @property
    def name(self):
        return self._.name

    @property
    def subject(self):
        return self._.subject

    @property
    def url(self):
        return self._.url

    @property
    def properties(self):
        return self._.properties


class DistributionPackageIssueAdapter(GenericAdapter):
    log = logging.getLogger(__name__)

    def __init__(self, *args, **kwargs):
        self._class = DistributionPackageIssue
        self._filters = (
            ('id',),
            ('package', 'issue', ),
        )
        super().__init__(*args, **kwargs)

    @property
    def package(self):
        return DistributionPackageAdapter(self._.package)

    @property
    def status(self):
        return self._.status

    def __str__(self):
        return '{} --> {}'.format(str(self.package), self.status or 'Fixed')