from lib.db.models import *
from lib.db.api import DBAPI

import yaml


class SecurityAdvisory(object):
    def __init__(self, name=None):
        self.db_api = DBAPI()

        self.cves = []
        self.source_packages = []

        if name:
            self.load(name)
        else:
            self.advisory = Advisory()
            self.advisory.name = name

    def save(self):
        self.db_api.session.add(self.advisory)

        for pkg in self.source_packages:
            self.db_api.session.add(pkg)

        for cve in self.cves:
            self.db_api.session.add(cve)

        for cve in self.cves:
            link = self.db_api.get(AdvisoryCVE, self.advisory, cve)
            self.db_api.session.add(link)

        for pkg in self.source_packages:
            for cve in self.cves:
                link = self.db_api.get(SourcePackageCVE, pkg, cve)
                self.db_api.session.add(link)

        for pkg in self.source_packages:
            link = self.db_api.get(AdvisorySourcePackage, self.advisory, pkg)
            self.db_api.session.add(link)

        self.db_api.session.commit()

    def load(self, name=''):
        res = self.db_api.session.query(Advisory).\
            filter(Advisory.name == name).all()

        if len(res) > 1:
            raise Exception('SecurityAdvisory.load() expects one record from'
                            ' database, found {}'.format(len(res)))

        if len(res) == 0:
            self.advisory = Advisory()
            self.advisory.name = name
            return

        self.advisory = res[0]

        for link in self.advisory.cves:
            self.cves.append(link.cve)

        for link in self.advisory.source_packages:
            self.source_packages.append(link.source_package)

    def dump(self):
        data = {
            'advisory': {
                'name': self.advisory.name,
                'subject': self.advisory.subject,
            },
            'cves': [],
            'packages': [],
        }
        for link in self.advisory.cves:
            data['cves'].append({
                'name': link.cve.name
            })

        for pkg in self.source_packages:
            d = {
                'name': pkg.name,
                'version': pkg.version,
                'dists': [],
            }
            for link in pkg.distributions:
                dist = link.distribution
                d['dists'].append(
                    {
                        'name': dist.name,
                        'version': dist.version,
                        'arch': dist.arch
                    }
                )
            data['packages'].append(d)

        return yaml.dump(data, default_flow_style=False)

    def add_cve(self, name):
        cve = self.db_api.get(CVE, name)
        if cve not in self.cves:
            self.cves.append(cve)
        return cve

    def add_source_package(self, name, version):
        spkg = self.db_api.get(SourcePackage, name, version)
        if spkg not in self.source_packages:
            self.source_packages.append(spkg)
        return spkg
