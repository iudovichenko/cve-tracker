

from lib.adapter import CPEAdapter
from lib.cpe import CpeWFN


class ConfigurationNode(object):
    def __init__(self):
        self._operator = 'OR'
        self._children = []
        self._cpe_list = []
        self._results = []

    def parse(self, data):
        self._operator = data.get('operator', 'OR')

        if 'nodes' in data:
            for item in data['nodes']:
                node = ConfigurationNode()
                node.parse(item)
                self._children.append(node)
            return

        if 'children' in data:
            for item in data['children']:
                node = ConfigurationNode()
                node.parse(item)
                self._children.append(node)
            return

        if 'cpe' in data:
            for item in data['cpe']:
                self._cpe_list.append(item)

    def evaluate(self):
        for node in self._children:
            self._results.append(node.evaluate())

        for item in self._cpe_list:
            self._results.append(self.evaluate_cpe(item))

        return self.merge_results()

    def evaluate_cpe(self, item):
        result = set()
        wfn = CpeWFN(item['cpe23Uri'])
        try:
            cpe = CPEAdapter(part=str(wfn.get('part')),
                             vendor=str(wfn.get('vendor')),
                             product=str(wfn.get('product')))
        except:
            return result

        for project in cpe.projects:
            for package in project.source_packages:
                if package.version == cpe.version:
                    result.add(package)
        return result

    def merge_results(self):
        return None
