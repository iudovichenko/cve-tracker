
import logging

from lib.adapter import CPEAdapter
from lib.cpe import CpeWFN

LOG = logging.getLogger(__name__)


class ConfigurationNodeResult(object):
    def __init__(self, data=None, exception=None):
        self._class = eval(self.__class__.__name__)
        self.data = set()
        if data:
            self.data.update(data)

    def add(self, value):
        self.data.add(value)

    def evaluate(self, operator, other):
        if operator == 'AND':
            return self & other
        if operator == 'OR':
            return self | other
        raise Exception("Bad operator")

    def __and__(self, other):
        return self._class(data=(self.data & other.data))

    def __or__(self, other):
        return self._class(data=(self.data | other.data))


class ConfigurationNode(object):
    def __init__(self, data):
        self._class = eval(self.__class__.__name__)
        self.operator = data.get('operator')
        if self.operator is None:
            raise Exception("Bad configuration node data")
        self.negate = data.get('negate', False)
        self.cpe = data.get('cpe', list())
        self.children = list()
        for x in data.get('children', list()):
            self.children.append(self._class(x))

    def evaluate(self, method='evaluate_cpe', *args, **kwargs):
        result = ConfigurationNodeResult()
        for x in self.cpe:
            result = result.evaluate(
                self.operator,
                getattr(self, method)(x, *args, **kwargs))
        for x in self.children:
            result = result.evaluate(
                self.operator, x.evaluate(*args, **kwargs))
        return result

    def evaluate_cpe(self, *args, **kwargs):
        raise Exception("Not implemented: 'evaluate_cpe'")


class Node(ConfigurationNode):
    def evaluate_cpe(self, data):
        result = ConfigurationNodeResult()
        wfn = CpeWFN(data['cpe23Uri'])
        try:
            cpe = CPEAdapter(part=str(wfn.get('part')),
                             vendor=str(wfn.get('vendor')),
                             product=str(wfn.get('product')))
        except:
            return result

        # LOG.info("CPE found - {}".format(str(cpe.wfn)))
        version = str(wfn.get('version'))
        for project in cpe.projects:
            for package in project.source_packages:
                if package.version == version:
                    result.add(package)
        return result
