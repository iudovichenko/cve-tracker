
from lib.config import CONFIG

import os
import re
import yaml


def match_project_overrides(name, default=None):
    def result(rule, value):
        return {
            'name': value,
            'summary': rule.get('summary', ''),
            'homepage': rule.get('homepage', ''),
            'type': rule.get('type', ''),
        }

    rules_file = os.path.join(
        CONFIG.config.get('common', 'overrides'),
        'projects.yaml'
    )
    if os.path.exists(rules_file):
        rules = yaml.load(open(rules_file))
    else:
        return result({}, name.split('/')[-1])

    for rule in rules:
        for key in rule.get('key', []):
            if name.lower() == key.lower():
                return result(rule, rule.get('value', name.split('/')[-1]))

        for pattern in rule.get('pattern', []):
            regex = re.compile(pattern, re.IGNORECASE)
            match = regex.match(name)
            if match:
                groups = match.groups(default=())
                groupdict = match.groupdict(default={})
                value = rule.get('value', None)
                if value:
                    return result(rule, value.format(*groups, **groupdict))

                return result(rule, name.split('/')[-1])

    return result({}, default)
