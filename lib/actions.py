
import apt
import csv
import json
import logging
import os
import tempfile
import yaml

from jinja2 import Environment, FileSystemLoader

from lib.db.api import DBAPI

from lib.misc import DebianVersion

from lib.adapter import AdvisoryAdapter
from lib.adapter import CVEAdapter
from lib.adapter import ProjectAdapter
from lib.adapter import DistributionAdapter
from lib.adapter import DistributionPackageAdapter
from lib.adapter import SourcePackageAdapter
from lib.adapter import ProductAdapter
from lib.adapter import ProductPackageAdapter

from lib.db.models import Advisory
from lib.db.models import CVE
from lib.db.models import SourceProject
from lib.db.models import SourcePackage
from lib.db.models import ProductPackage
from lib.db.models import ProductPackageIssue
from lib.db.models import Distribution
from lib.db.models import DistributionPackage
from lib.db.models import Product


def map_parsed_args(parsed_args, args_map):
    d = {}
    for arg, key in args_map.items():
        value = getattr(parsed_args, arg, None)
        if value:
            d[key] = value
    return d


class Action(object):
    log = logging.getLogger(__name__)

    def __init__(self, parsed_args=None, args_map=None):
        self.db_api = DBAPI()

        if args_map is None:
            args_map = {}

        if parsed_args is None:
            self.mapped_args = {}
        else:
            self.mapped_args = map_parsed_args(parsed_args, args_map)

    def take_action(self):
        raise Exception("Not implemented")


class ImportAdvisoryAction(Action):
    def take_action(self, data=None):
        if data is None:
            data = self.mapped_args

        filename = data['filename']
        self.log.info("Importing advisory data from '{}'".format(filename))

        count = 0
        with open(filename) as f:
            adv_list = json.load(f)

            for adv_name, adv_data in adv_list.items():
                count += 1

                adv = AdvisoryAdapter(name=adv_name)
                adv.update(adv_data)
                adv.commit()

        self.log.info('Import done. Imported {} advisory object(s).'
                      .format(count))


class ImportPackageAction(Action):
    def take_action(self, data=None):
        if data is None:
            data = self.mapped_args

        filename = data['filename']
        self.log.info("Importing packages data from '{}'".format(filename))

        count = 0
        with open(filename) as f:
            for line in f:
                count += 1
                data = json.loads(line)
                ppkg = ProductPackageAdapter()
                ppkg.update(data)
                ppkg.commit()

        self.log.info('Import done. Imported {} package object(s).'
                      .format(count))


class ExportCveAction(Action):
    @staticmethod
    def iter(objs):
        for obj in objs:
            cve = CVEAdapter(obj)
            yield cve.export()

    def take_action(self, data=None):
        if data is None:
            data = self.mapped_args

        filename = data['filename']
        objs = self.db_api.session.query(CVE).all()
        if filename:
            ext = filename.split('.', maxsplit=1)[-1].lower()
            with open(filename, 'a') as f:
                if ext in ['yml', 'yaml', ]:
                    for data in self.iter(objs):
                        f.write(yaml.dump(data))
                else:
                    for data in iter(objs):
                        f.write(json.dumps(data))
                        f.write('\n')
        else:
            for data in iter(objs):
                print(dict(data))


class ExportSourcePackageAction(Action):
    @staticmethod
    def iter(objs):
        for obj in objs:
            pkg = SourcePackageAdapter(obj)
            yield pkg.export()

    def take_action(self, data=None):
        if data is None:
            data = self.mapped_args

        filename = data['filename']
        objs = self.db_api.session.query(SourcePackage).all()
        if filename:
            ext = filename.split('.', maxsplit=1)[-1].lower()
            with open(filename, 'a') as f:
                if ext == 'csv':
                    fieldnames = ['project', 'package', 'origin', 'product',
                                  'distribution', 'binary_package', 'cve']
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    writer.writeheader()
                    for d in self.iter(objs):
                        for pp in d.get('product_packages', []):
                            datarow = {}
                            datarow['project'] = pp\
                                .get('property', {})\
                                .get('source_project', '')
                            datarow['package'] = '{}-{}'.format(
                                pp.get('distribution_package', {})
                                    .get('source_package', {})
                                    .get('name', ''),
                                pp.get('distribution_package', {})
                                    .get('source_package', {})
                                    .get('version', '')
                            )
                            datarow['product'] ='{}-{}'.format(
                                pp.get('product', {})
                                    .get('name', ''),
                                pp.get('product', {})
                                    .get('version', '')
                            )
                            datarow['distribution'] = '{} {} {}'.format(
                                pp.get('distribution_package', {})
                                    .get('distribution', {})
                                    .get('name', ''),
                                pp.get('distribution_package', {})
                                    .get('distribution', {})
                                    .get('version', ''),
                                pp.get('distribution_package', {})
                                    .get('distribution', {})
                                    .get('arch', ''),
                            )
                            datarow['origin'] = pp\
                                .get('source_package', {})\
                                .get('property', {})\
                                .get('origin', '')
                            datarow['cve'] = ' '.join(
                                [x['cve']['name'] for x in d.get('cves', [])]
                            )
                            for pkg in pp.get('binary_packages', ['', ]):
                                datarow['binary_package'] = pkg
                                writer.writerow(datarow)
                elif ext in ['yml', 'yaml', ]:
                    for data in iter(objs):
                        f.write(yaml.dump([dict(data), ]))
                else:
                    for data in iter(objs):
                        f.write(json.dumps(dict(data)))
                        f.write('\n')
        else:
            for data in iter(objs):
                print(dict(data))


class InitDbAction(Action):
    def take_action(self, *args, **kwargs):
        self.db_api.init_db()

        distributions = [
            {
                'name': 'Ubuntu',
                'version': '14.04',
                'arch': 'x86_64',
                'sources': [
                    'deb http://archive.ubuntu.com/ubuntu trusty '
                    'main restricted universe multiverse',
                    'deb http://archive.ubuntu.com/ubuntu trusty-updates '
                    'main restricted universe multiverse',
                    'deb http://archive.ubuntu.com/ubuntu trusty-backports '
                    'main restricted universe multiverse',
                    'deb http://security.ubuntu.com/ubuntu trusty-security '
                    'main restricted universe multiverse',
                ]
            },
            {
                'name': 'Ubuntu',
                'version': '16.04',
                'arch': 'x86_64',
                'sources': [
                    'deb http://archive.ubuntu.com/ubuntu xenial '
                    'main restricted universe multiverse',
                    'deb http://archive.ubuntu.com/ubuntu xenial-updates '
                    'main restricted universe multiverse',
                    'deb http://archive.ubuntu.com/ubuntu xenial-backports '
                    'main restricted universe multiverse',
                    'deb http://security.ubuntu.com/ubuntu xenial-security '
                    'main restricted universe multiverse',
                ]
            },
        ]

        for data in distributions:
            dist = DistributionAdapter()
            dist.initialize(name=data['name'], version=data['version'],
                            arch=data['arch'])
            for src in data['sources']:
                dist.add_property(name='source_list', value=src)
            dist.commit()


class ScanDistributionPackageAction(Action):
    def take_action(self, data=None):
        if data is None:
            data = self.mapped_args

        dist = DistributionAdapter()
        dist.try_load(**data)

        rootdir = tempfile.mkdtemp()
        cache = apt.Cache(rootdir=rootdir)
        with open(rootdir + '/etc/apt/sources.list', 'w') as f:
            for item in dist.properties:
                if item.name == 'source_list':
                    f.write('{}\n'.format(item.value))

        # Now, lets update the package list
        cache.open(None)
        cache.update()
        # We need to re-open the cache because it needs to read the package list
        cache.open(None)

        for pkg in dist.distribution_packages:
            if not cache.has_key(pkg.name):
                continue
            deb_pkg = cache[pkg.name]
            latest = deb_pkg.versions[0]
            version = DebianVersion(latest.version)
            if pkg.version == version.version:
                print("Matched package {} {}".format(pkg.name,
                                                     version.full_version))
                dist_pkg = dist.add_package(pkg.source_package,
                                            version=version.full_version)
                dist_pkg.commit()


class ReportUnresolvedCveAction(Action):
    def take_action(self, rootdir='.'):
        env = Environment(
            loader=FileSystemLoader('templates')
        )

        template = env.get_template('unresolved-cves.html')
        join = [(ProductPackageIssue, {'resolved': False}), ]
        objs = self.db_api.query(ProductPackage, ProductPackageAdapter,
                                 join=join)
        _rootdir = os.path.join(rootdir, 'html', 'reports')
        os.makedirs(_rootdir, exist_ok=True)
        path = os.path.join(_rootdir, 'unresolved-cves.html')
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


class ExportHtmlAction(Action):
    def take_action(self):
        rootdir = self.mapped_args.get('rootdir', 'html')
        env = Environment(
            loader=FileSystemLoader('templates')
        )

        template = env.get_template('distribution.html')
        _rootdir = os.path.join(rootdir, 'distribution')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(Distribution, DistributionAdapter)
        for obj in objs:
            path = os.path.join(
                _rootdir,
                '{}.html'.format(obj.id)
            )
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('distribution-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(Distribution, DistributionAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('product.html')
        _rootdir = os.path.join(rootdir, 'product')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(Product, ProductAdapter)
        for obj in objs:
            path = os.path.join(
                _rootdir,
                '{}.html'.format(obj.id)
            )
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('product-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(Product, ProductAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('advisory.html')
        _rootdir = os.path.join(rootdir, 'advisory')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(Advisory, AdvisoryAdapter)
        for obj in objs:
            path = os.path.join(_rootdir, obj.name + '.html')
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('advisory-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(Advisory, AdvisoryAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('cve.html')
        _rootdir = os.path.join(rootdir, 'cve')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(CVE, CVEAdapter)
        for obj in objs:
            path = os.path.join(_rootdir, obj.name + '.html')
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('cve-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(CVE, CVEAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('source-project.html')
        _rootdir = os.path.join(rootdir, 'source-project')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(SourceProject, ProjectAdapter)
        for obj in objs:
            path = os.path.join(
                _rootdir,
                '{}.html'.format(obj.name)
            )
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('source-project-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(SourceProject, ProjectAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('source-package.html')
        _rootdir = os.path.join(rootdir, 'source-package')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(SourcePackage, SourcePackageAdapter)
        for obj in objs:
            path = os.path.join(
                _rootdir,
                '{}-{}.html'.format(obj.name, obj.version)
            )
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('source-package-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(SourcePackage, SourcePackageAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('distribution-package.html')
        _rootdir = os.path.join(rootdir, 'distribution-package')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(DistributionPackage,
                                 DistributionPackageAdapter)
        for obj in objs:
            path = os.path.join(
                _rootdir,
                '{}.html'.format(obj.id)
            )
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('distribution-package-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(DistributionPackage,
                                 DistributionPackageAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('product-package.html')
        _rootdir = os.path.join(rootdir, 'product-package')
        os.makedirs(_rootdir, exist_ok=True)
        objs = self.db_api.query(ProductPackage, ProductPackageAdapter)
        for obj in objs:
            path = os.path.join(
                _rootdir,
                '{}.html'.format(obj.id)
            )
            with open(path, 'w') as f:
                f.write(template.render(obj=obj))

        template = env.get_template('product-package-index.html')
        path = os.path.join(_rootdir, 'index.html')
        objs = self.db_api.query(ProductPackage, ProductPackageAdapter)
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('unresolved-cves.html')
        join = [(ProductPackageIssue, {'resolved': False}), ]
        objs = self.db_api.query(ProductPackage, ProductPackageAdapter,
                                 join=join)
        _rootdir = os.path.join(rootdir, 'reports')
        os.makedirs(_rootdir, exist_ok=True)
        path = os.path.join(_rootdir, 'unresolved-cves.html')
        with open(path, 'w') as f:
            f.write(template.render(objs=objs))


        template = env.get_template('index.html')
        path = os.path.join(rootdir, 'index.html')
        with open(path, 'w') as f:
            f.write(template.render())
