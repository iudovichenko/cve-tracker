
import logging

from cliff.command import Command
from cliff.lister import Lister
from cliff.show import ShowOne

from cvetracker.actions import ApplyCpeOverridesAction
from cvetracker.actions import ApplyCveOverridesAction
from cvetracker.actions import ExportCveAction
from cvetracker.actions import ExportHtmlAction
from cvetracker.actions import ExportRecentlyUpdatedAction
from cvetracker.actions import ExportOvalAction
from cvetracker.actions import ExportSourcePackageAction
from cvetracker.actions import ImportAdvisoryAction
from cvetracker.actions import ImportCPEAction
from cvetracker.actions import ImportFeedAction
from cvetracker.actions import ImportPackageAction
from cvetracker.actions import InitDbAction
from cvetracker.actions import ListSourceProjectAction
from cvetracker.actions import RefreshProjectAction
from cvetracker.actions import SendEmailAction
# from cvetracker.actions import ReportUnresolvedCveAction
from cvetracker.actions import ScanDistributionPackageAction
from cvetracker.actions import UpdateSourceProjectAction
from cvetracker.actions import map_parsed_args

from cvetracker.db.adapters import AdvisoryAdapter
from cvetracker.db.adapters import CPEAdapter
from cvetracker.db.adapters import CVEAdapter
from cvetracker.db.adapters import DistributionAdapter
from cvetracker.db.adapters import DistributionPackageAdapter
from cvetracker.db.adapters import ProductAdapter
from cvetracker.db.adapters import ProductPackageAdapter
from cvetracker.db.adapters import SourcePackageAdapter
from cvetracker.db.adapters import SourceProjectAdapter

from cvetracker.db.api import DBAPI

from cvetracker.db.models import Advisory
from cvetracker.db.models import CPE
from cvetracker.db.models import CVE
from cvetracker.db.models import Distribution
from cvetracker.db.models import DistributionPackage
from cvetracker.db.models import Product
from cvetracker.db.models import ProductPackage
from cvetracker.db.models import ProductPackageIssue
from cvetracker.db.models import SourcePackage
from cvetracker.db.models import SourceProject

from cvetracker.git_scanner import GitProjectScanner


class CliImportAdvisory(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        parser.add_argument('--changes')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
            'changes': 'changes',
        }
        action = ImportAdvisoryAction(parsed_args=parsed_args,
                                      args_map=args_map)
        action.take_action()


class CliImportCpe(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        parser.add_argument('--changes')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
            'changes': 'changes',
        }
        action = ImportCPEAction(parsed_args=parsed_args,
                                 args_map=args_map)
        action.take_action()


class CliImportFeed(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--feed-filter')
        parser.add_argument('--feed', action='append')
        parser.add_argument('--feeds')
        parser.add_argument('--tmpdir')
        parser.add_argument('--filename')
        parser.add_argument('--changes')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'feed_filter': 'feed_filter',
            'feed': 'feed',
            'feeds': 'feeds',
            'tpmdir': 'tmpdir',
            'filename': 'filename',
            'changes': 'changes',
        }
        action = ImportFeedAction(parsed_args=parsed_args,
                                  args_map=args_map)
        action.take_action()


class CliImportPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('filename')
        parser.add_argument('--changes')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
            'changes': 'changes',
        }
        action = ImportPackageAction(parsed_args=parsed_args,
                                     args_map=args_map)
        action.take_action()


class CliScanProjects(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--out-file')
        parser.add_argument('--threads')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'out_file': 'filename',
            'threads': 'thread_count',
        }
        mapped_args = map_parsed_args(parsed_args=parsed_args,
                                      args_map=args_map)
        if 'thread_count' in mapped_args:
            mapped_args['thread_count'] = int(mapped_args['thread_count'])
        scanner = GitProjectScanner(**mapped_args)
        scanner.start()


class CliExportCve(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ExportCveAction(parsed_args=parsed_args,
                                 args_map=args_map)
        action.take_action()


class CliExportOval(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ExportOvalAction(parsed_args=parsed_args,
                                  args_map=args_map)
        action.take_action()


class CliExportSourcePackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filename')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filename': 'filename',
        }
        action = ExportSourcePackageAction(parsed_args=parsed_args,
                                           args_map=args_map)
        action.take_action()


class CliListAdvisory(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Advisory).all()
        cols = ('ID', 'Name', 'Subject', 'URL')
        data = [(obj.id, obj.name, obj.subject, obj.url)
                for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListCpe(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(CPE).all()
        cols = ('ID', 'Part', 'Vendor', 'Product')
        data = [(x.id, x.part, x.vendor, x.product) for x in objs]
        data.sort(key=lambda x: '{}:{}'.format(x[2], x[3]))
        return cols, data


class CliListCve(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(CVE).all()
        cols = ('ID', 'Name', 'Subject')
        data = [(obj.id, obj.name, obj.subject) for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListProject(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        parser.add_argument('--cpe')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'name',
            'cpe': 'cpe',
        }

        action = ListSourceProjectAction(parsed_args=parsed_args,
                                         args_map=args_map)
        cols = ('ID', 'Name', 'CPE')
        data = [(x.id, x.name, [str(y.wfn) for y in x.cpes])
                for x in action.take_action()]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(DistributionPackage,
                            DistributionPackageAdapter)
        cols = ('ID', 'Name', 'Version', 'Distribution')
        data = [(obj.id, obj.name, obj.version, str(obj.distribution))
                for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListSourcePackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'name': 'project',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        if 'project' in _kwargs:
            _kwargs['project'] = db_api.get_create(SourceProject,
                                                   name=_kwargs['project'])
        objs = db_api.query(SourcePackage, SourcePackageAdapter, **_kwargs)
        cols = ('ID', 'Name', 'Version')
        data = [(obj.id, obj.name, obj.version) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProduct(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Product).all()
        cols = ('ID', 'Name', 'Version', 'Vendor')
        data = [(obj.id, obj.name, obj.version, obj.vendor) for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliListProductPackage(Lister):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--name')
        parser.add_argument('--resolved', type=int, default=-1)
        parser.add_argument('--affected', type=int, default=-1)
        return parser

    def take_action(self, parsed_args):
        # args_map = {
        #     'name': 'name',
        # }
        # _kwargs = map_parsed_args(parsed_args, args_map)

        db_api = DBAPI()
        join = []
        if parsed_args.resolved == 1:
            join.append((ProductPackageIssue, {'resolved': True}))
        elif parsed_args.resolved == 0:
            join.append((ProductPackageIssue, {'resolved': False}))
        if parsed_args.affected == 1:
            join.append((ProductPackageIssue, {'affected': True}))
        elif parsed_args.affected == 0:
            join.append((ProductPackageIssue, {'affected': False}))
        objs = db_api.query(ProductPackage, ProductPackageAdapter, join=join)
        cols = ('ID', 'Product', 'Distribution', 'Name', 'Version',)
        data = ((x.id, str(x.product), str(x.distribution), x.name, x.version)
                for x in objs)
        return cols, data


class CliListDistribution(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.session.query(Distribution).all()
        cols = ('ID', 'Name', 'Version', 'Arch')
        data = [(str(obj.id), str(obj.name), str(obj.version), str(obj.arch))
                for obj in objs]
        data.sort(key=lambda x: x[1])
        return cols, data


class CliListDistributionPackage(Lister):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        db_api = DBAPI()
        objs = db_api.query(DistributionPackage,
                            DistributionPackageAdapter)
        cols = ('ID', 'Distribution', 'Name', 'Version')
        data = [(obj.id, str(obj.distribution), obj.name, obj.version)
                for obj in objs]
        data.sort(key=lambda x: ''.join((x[1], x[2])))
        return cols, data


class CliShowCpe(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        cpe = CPEAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return cpe.show(formatter=formatter)[:2]


class CliShowCve(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        cve = CVEAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return cve.show(formatter=formatter)[:2]


class CliShowProject(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        prj = SourceProjectAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return prj.show(formatter=formatter)[:2]


class CliShowPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowSourcePackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--base-version')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'base_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = SourcePackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowDistribution(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--dist-version')
        parser.add_argument('--arch')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'dist_version': 'version',
            'arch': 'arch',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        dist = DistributionAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return dist.show(formatter=formatter)[:2]


class CliShowDistributionPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        pkg = DistributionPackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return pkg.show(formatter=formatter)[:2]


class CliShowAdvisory(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = AdvisoryAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliShowProduct(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliShowProductPackage(ShowOne):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = ProductPackageAdapter.load(**_kwargs)

        formatter = self.formatter.__class__.__name__
        return obj.show(formatter=formatter)[:2]


class CliUpdateCveStatus(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        return
        # db_api = DBAPI()
        # objs = db_api.session.query(CVE).all()
        # for obj in objs:
        #     cve = CVEAdapter(obj)
        #     cve.update_status()


class CliUpdateDistributionPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--set-distribution')
        parser.add_argument('--set-version')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'set_distribution': 'distribution',
            'set_version': 'version',
        }
        _kwargs = map_parsed_args(parsed_args, args_map)
        obj = DistributionPackageAdapter()
        obj.update(**_kwargs)


class CliUpdateProductPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--set-dist-package')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'set_dist_package': 'distribution_package_id',
        }
        data = map_parsed_args(parsed_args, args_map)
        obj = ProductPackageAdapter()
        obj.update(data)


class CliUpdateSourceProject(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        parser.add_argument('--name')
        parser.add_argument('--link-cpe')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'name': 'name',
            'link_cpe': 'link_cpe',
        }
        action = UpdateSourceProjectAction(parsed_args=parsed_args,
                                           args_map=args_map)
        action.take_action()


class CliInitDb(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--drop-database', action='store_true')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'drop_database': 'drop_database'
        }
        action = InitDbAction(parsed_args=parsed_args,
                              args_map=args_map)
        action.take_action()


class CliScanDistributionPackage(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--id')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'id': 'id',
            'set_distribution': 'distribution',
            'set_version': 'version',
        }
        action = ScanDistributionPackageAction(parsed_args=parsed_args,
                                               args_map=args_map)
        action.take_action()


# class CliReportUnresolvedCve(Command):
#     log = logging.getLogger(__name__)
#
#     def take_action(self, parsed_args):
#         action = ReportUnresolvedCveAction()
#         action.take_action()


class CliRefreshProject(Command):
    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        action = RefreshProjectAction()
        action.take_action()


class CliExportHtml(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--htmldir')
        parser.add_argument('--filesdir')
        parser.add_argument('--statefile')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'htmldir': 'htmldir',
            'filesdir': 'filesdir',
            'statefile': 'statefile',
        }
        action = ExportHtmlAction(parsed_args=parsed_args,
                                  args_map=args_map)
        action.take_action()


class CliExportRecentlyUpdated(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--filesdir', default='files',
                            help="Folder where to export JSON file")
        parser.add_argument('--filename',
                            help="File name for exported data")
        parser.add_argument('--statefile',
                            help="State file for selecting recently "
                                 "updated items")
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'filesdir': 'filesdir',
            'filename': 'filename',
            'statefile': 'statefile',
        }
        action = ExportRecentlyUpdatedAction(parsed_args=parsed_args,
                                             args_map=args_map)
        action.take_action()


class CliApplyCpeOverrides(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--path')
        parser.add_argument('--changes')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'path': 'path',
            'changes': 'changes',
        }
        action = ApplyCpeOverridesAction(parsed_args=parsed_args,
                                         args_map=args_map)
        action.take_action()


class CliApplyCveOverrides(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--path')
        parser.add_argument('--changes')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'path': 'path',
            'changes': 'changes',
        }
        action = ApplyCveOverridesAction(parsed_args=parsed_args,
                                         args_map=args_map)
        action.take_action()


class CliSendEmailNotification(Command):
    log = logging.getLogger(__name__)

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument('--changes')
        parser.add_argument('--recent')
        return parser

    def take_action(self, parsed_args):
        args_map = {
            'recent': 'rececnt',
            'changes': 'changes',
        }
        action = SendEmailNotification(parsed_args=parsed_args,
                                       args_map=args_map)
        action.take_action()
