import json
import logging


class JsonFile(object):
    log = logging.getLogger(__name__)

    def __init__(self, filename=None):
        self.filename = filename
        self.data = list()

    def load(self):
        assert self.filename, "filename can't be None or empty string"

        with open(self.filename) as f:
            with open(self.filename) as f:
                self.data = list()
                try:
                    data = json.load(f)
                    if isinstance(data, list):
                        self.data.extend(data)
                    else:
                        self.data.append(data)
                    return
                except: # noqa
                    self.log.warning("Load entire file failed, "
                                     "will try line by line")

            with open(self.filename) as f:
                self.data = list()
                for line in f:
                    try:
                        self.data.append(json.loads(line.rstrip()))
                    except: # noqa
                        self.log.warning("Failed to parse line '{}'"
                                         .format(line))
                        self.data = list()
                        return

            if not self.data:
                self.log.warning("Failed to load JSON file '{}'"
                                 .format(self.filename))

    def __iter__(self):
        for x in self.data:
            yield x

    def __contains__(self, item):
        return item in self.data


class JsonFileIndex(object):
    log = logging.getLogger(__name__)

    def __init__(self, jsonfile):
        self.jsonfile = jsonfile
        self.index_strings = list()
        self.index = dict()

    def add_index(self, string):
        self.index_strings.append(string)

    def build_index(self):
        for item in self.jsonfile:
            for fmt in self.index_strings:
                try:
                    index = fmt.format(item)
                    self.index[index] = item
                    break
                except: # noqa
                    pass
                    # self.log.exception("Bad index '{}'".format(fmt))
            else:
                # No break called inside
                self.index.setdefault(None, list()).append(item)
                self.log.warning("Can't get index key for '{}'".format(item))

    def get_diff(self, other):
        diff = list()

        for value in self.get(None, default=list()):
            diff.append({
                'lval': value,
                'rval': None,
            })
        for value in other.get(None, default=list()):
            diff.append({
                'lval': None,
                'rval': value,
            })

        for key, value in self:
            if key is None:
                continue
            if key in other:
                other_value = other.get(key)
                if value != other_value:
                    diff.append({
                        'lval': value,
                        'rval': other_value
                    })
            else:
                diff.append({
                    'lval': value,
                    'rval': None,
                })

        for key, value in other:
            if key not in self:
                diff.append({
                    'lval': None,
                    'rval': value,
                })
        return diff

    def get(self, key, **kwargs):
        if 'default' in kwargs:
            return self.index.get(key, kwargs['default'])
        else:
            return self.index.get(key)

    def __iter__(self):
        for k, v in self.index.items():
            yield k, v

    def __contains__(self, item):
        return item in self.index
