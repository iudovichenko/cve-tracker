from reportlab.lib import pagesizes as PageSizes
from reportlab.lib import styles as Styles
from reportlab.lib import enums as Enums
from reportlab.lib import units as Units
from reportlab.lib import colors as Colors

from reportlab.platypus import Paragraph
from reportlab.platypus import PageBreak
from reportlab.platypus import Spacer
from reportlab.platypus import Table
from reportlab.platypus import SimpleDocTemplate

from reportlab.platypus.tables import TableStyle

import io


class MSAGenerator(object):
    def __init__(self, template={}):
        self.styles = {
            'style': {
                'name':'Normal',
                'align':Enums.TA_CENTER
            },
            'title': {
                'name':'Title',
                'align': Enums.TA_CENTER
            },
            'summary': {
                'name':'Normal',
                'align': Enums.TA_LEFT
            },
            'cve': {
                'name': 'Heading3',
                'align': Enums.TA_LEFT
            },
            'cve_info': {
                'name': 'Heading5',
                'align': Enums.TA_LEFT
            },
            'cve_description': {
                'name': 'Definition',
                'align': Enums.TA_LEFT
            },
            'cve_link': {
                'name': 'Code',
                'align': Enums.TA_LEFT
            },
            'cve_label_color': 'red',
            'cve_link_color': 'blue',
        }
        self.template = {
            'title': 'Mirantis Security Advisory',
            'description': 'Some description for this advisory',
            'doctitle': 'Mirantis Security Report',
            'author': 'MOS Linux Team',
            'subject': 'Mirantis security',
            'mitre_url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name={0}',
            'nist_url': 'https://nvd.nist.gov/vuln/detail/{0}',
        }
        if template:
            self.template.update(template)

    def parse_json(self, data):
        stylesheet = Styles.getSampleStyleSheet()

        style = stylesheet[self.styles['style']['name']]
        style.alignment = self.styles['style']['align']

        packages = list()
        text = list()
        packages.append(['CVE', 'Package', 'Version', 'Affected', 'Resolved'])

        for entry in data:
            item = entry['item']
            model = item['__model__']
            if model == 'SourcePackageIssue':
                pkg_name = item['package']['project']['name']
            elif model == 'ProductPackageIssue':
                pkg_name = item['package']['distribution_package']['name']
            elif model == 'DistributionPackageIssue':
                pkg_name = item['package']['source_package']['project']['name']
            else:
                raise Exception("Unexpected model '{}'".format(model))
            version = item['package']['version']
            affected = item['affected']
            resolved = item['resolved']
            cve_id = item['issue']['name']
            cve_anchor = '<a href="#{0}" color="{1}">{0}</a>'\
                .format(cve_id, self.styles['cve_link_color'])
            cve_text = Paragraph(cve_anchor, style)
            packages.append([cve_text, pkg_name, version, affected, resolved])

            reference = item['issue']['property']['reference']
            label = '<a name="{0}"/><font color="{1}">{0}</font>'\
                .format(cve_id, self.styles['cve_label_color'])
            description = item['issue']['subject']
            text.append({
                'name': cve_id,
                'label': label,
                'description': description,
                'reference': reference
            })
        return packages, text

    def pdf_body(self, data, number):
        stylesheet = Styles.getSampleStyleSheet()

        TitleStyle = stylesheet[self.styles['title']['name']]
        TitleStyle.alignment = self.styles['title']['align']

        SummaryStyle = stylesheet[self.styles['summary']['name']]
        SummaryStyle.alignment = self.styles['summary']['align']

        CVEStyle = stylesheet[self.styles['cve']['name']]
        CVEStyle.alignment = self.styles['cve']['align']

        CVEInfoStyle = stylesheet[self.styles['cve_info']['name']]
        CVEInfoStyle.alignment = self.styles['cve_info']['align']

        CVEDescStyle = stylesheet[self.styles['cve_description']['name']]
        CVEDescStyle.alignment = self.styles['cve_description']['align']

        CVELinksStyle = stylesheet[self.styles['cve_link']['name']]
        CVELinksStyle.alignment = self.styles['cve_link']['align']

        body = list()
        body.append(Paragraph(
            '{} #{}'.format(self.template['title'], number), TitleStyle))

        body.append(Spacer(Units.inch, Units.inch/4))

        body.append(Paragraph(self.template['description'], SummaryStyle))

        body.append(Spacer(Units.inch, Units.inch/4))

        cve_table, text = self.parse_json(data)

        table = Table(cve_table)
        table.setStyle(TableStyle([
            ('INNERGRID', (0, 0), (-1, -1), 0.25, Colors.black),
            ('BOX', (0, 0), (-1, -1), 0.25, Colors.black)
        ]))

        body.append(table)

        body.append(PageBreak())

        for i in text:
            body.append(Paragraph(i['label'], CVEStyle))
            body.append(Paragraph('Description:', CVEInfoStyle))
            body.append(Paragraph(i['description'], CVEDescStyle))
            body.append(Paragraph('External Links:', CVEInfoStyle))
            body.append(Paragraph(
                '* <font color="{}">NIST</font>: <font color="{}">{}</font>'
                    .format(self.styles['cve_label_color'],
                            self.styles['cve_link_color'],
                            self.template['nist_url'].format(i['name'])),
                CVELinksStyle))
            body.append(Paragraph(
                '* <font color="{}">MITRE</font>: <font color="{}">{}</font>'
                    .format(self.styles['cve_label_color'],
                            self.styles['cve_link_color'],
                            self.template['mitre_url'].format(i['name'])),
                CVELinksStyle))
            for link in i['reference']:
                body.append(Paragraph(
                    '* <font color="{}">{}</font>'
                        .format(self.styles['cve_link_color'], link),
                    CVELinksStyle))
            body.append(Spacer(Units.inch, Units.inch/4))

        return body

    def make_pdf(self, data, number):
        pdf = io.BytesIO()
        doc = SimpleDocTemplate(
                pdf,
                pagesize=PageSizes.A4,
                title=self.template['doctitle'],
                author=self.template['author'],
                subject=self.template['subject'],
                creator=self.template['author'])
        doc.build(self.pdf_body(data, number))
        return pdf
