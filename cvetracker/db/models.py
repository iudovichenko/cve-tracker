import uuid

from sqlalchemy import Table, Column, ForeignKey, UniqueConstraint
from sqlalchemy import Boolean, Integer, String, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


advisory__cve = Table(
    'advisory__cve',
    Base.metadata,
    Column('advisory_id', Integer, ForeignKey('advisory.id')),
    Column('cve_id', Integer, ForeignKey('cve.id'))
)


advisory__source_package = Table(
    'advisory__source_package',
    Base.metadata,
    Column('advisory_id', Integer, ForeignKey('advisory.id')),
    Column('package_id', Integer, ForeignKey('source_package.id'))
)


advisory__distribution_package = Table(
    'advisory__distribution_package',
    Base.metadata,
    Column('advisory_id', Integer, ForeignKey('advisory.id')),
    Column('package_id', Integer, ForeignKey('distribution_package.id'))
)


source_project__cpe = Table(
    'source_project__cpe',
    Base.metadata,
    Column('source_project_id', Integer, ForeignKey('source_project.id')),
    Column('cpe_id', Integer, ForeignKey('cpe.id'))
)


class InitPropertyMixin(object):
    def __init__(self, *args, **kwargs):
        attrs = ['name', 'value']
        kwargs.update(dict(zip(attrs, args)))
        self.name = kwargs['name']
        self.value = kwargs['value']


class Advisory(Base):
    __tablename__ = 'advisory'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    subject = Column(String(255))
    url = Column(String(255))
    date_modified = Column(DateTime())

    cves = relationship(
        'CVE',
        back_populates='advisories',
        secondary=advisory__cve,
        collection_class=set,
    )
    distribution_packages = relationship(
        'DistributionPackage',
        back_populates='advisories',
        secondary=advisory__distribution_package,
        collection_class=set,
    )
    source_packages = relationship(
        'SourcePackage',
        back_populates='advisories',
        secondary=advisory__source_package,
        collection_class=set,
    )

    properties = relationship(
        'AdvisoryProperty',
        back_populates='parent',
        collection_class=set,
    )


class AdvisoryProperty(Base, InitPropertyMixin):
    __tablename__ = 'advisory_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('advisory.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'Advisory',
        back_populates='properties',
    )


class CPE(Base):
    __tablename__ = 'cpe'

    id = Column(Integer, primary_key=True)
    part = Column(String(4))
    vendor = Column(String(255))
    product = Column(String(255))
    date_modified = Column(DateTime())

    projects = relationship(
        'SourceProject',
        back_populates='cpes',
        secondary=source_project__cpe,
        collection_class=set,
    )


class CVE(Base):
    __tablename__ = 'cve'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    subject = Column(String(255))
    cvss_v2 = Column(String(255))
    cvss_v3 = Column(String(255))
    date_modified = Column(DateTime())

    advisories = relationship(
        'Advisory',
        back_populates='cves',
        secondary=advisory__cve,
        collection_class=set,
    )

    distribution_packages = relationship(
        'DistributionPackageIssue',
        back_populates='issue',
        collection_class=set,
    )
    product_packages = relationship(
        'ProductPackageIssue',
        back_populates='issue',
        collection_class=set,
    )
    properties = relationship(
        'CVEProperty',
        back_populates='parent',
        collection_class=set,
    )
    source_packages = relationship(
        'SourcePackageIssue',
        back_populates='issue',
        collection_class=set,
    )


class CVEProperty(Base, InitPropertyMixin):
    __tablename__ = 'cve_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('cve.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'CVE',
        back_populates='properties',
    )


class Distribution(Base):
    __tablename__ = 'distribution'

    id = Column(Integer, primary_key=True)
    name = Column(String(255), nullable=True)
    version = Column(String(255), nullable=True)
    arch = Column(String(255), nullable=True)
    date_modified = Column(DateTime())

    __table_args__ = ((UniqueConstraint('name', 'version', 'arch'), ))

    packages = relationship(
        'DistributionPackage',
        back_populates='distribution',
    )
    product_packages = relationship(
        'ProductPackage',
        back_populates='distribution',
    )
    properties = relationship(
        'DistributionProperty',
        back_populates='parent',
        collection_class=set,
    )


class DistributionPackage(Base):
    __tablename__ = 'distribution_package'

    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    package_id = Column(Integer, ForeignKey('source_package.id'),
                        primary_key=True)
    distribution_id = Column(Integer, ForeignKey('distribution.id'),
                             primary_key=True)
    # Version of a package included in a particular distribution.
    # Includes such attributes as 'epoch', 'release version', and so on
    # Example: 1:2.5+dfsg-5ubuntu6
    version = Column(String(255), primary_key=True, nullable=True)
    date_modified = Column(DateTime())

    advisories = relationship(
        'Advisory',
        back_populates='distribution_packages',
        secondary=advisory__distribution_package,
        collection_class=set,
    )

    distribution = relationship(
        'Distribution',
        back_populates='packages',
    )
    issues = relationship(
        'DistributionPackageIssue',
        back_populates='package',
        collection_class=set,
    )
    product_packages = relationship(
        'ProductPackage',
        back_populates='distribution_package',
    )
    properties = relationship(
        'DistributionPackageProperty',
        back_populates='parent',
        collection_class=set,
    )
    source_package = relationship(
        'SourcePackage',
        back_populates='distribution_packages',
    )


class DistributionPackageIssue(Base):
    __tablename__ = 'distribution_package_issue'

    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    package_id = Column(Integer, ForeignKey('distribution_package.id'),
                        primary_key=True)
    issue_id = Column(Integer, ForeignKey('cve.id'),
                      primary_key=True)
    affected = Column(Boolean, default=True)
    resolved = Column(Boolean, default=False)
    status = Column(String(255))
    date_modified = Column(DateTime())

    __table_args__ = ((UniqueConstraint('package_id', 'issue_id'), ))

    issue = relationship(
        'CVE',
        back_populates='distribution_packages',
    )
    package = relationship(
        'DistributionPackage',
        back_populates='issues',
    )
    properties = relationship(
        'DistributionPackageIssueProperty',
        back_populates='parent',
        collection_class=set,
    )


class DistributionPackageIssueProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_package_issue_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('distribution_package_issue.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'DistributionPackageIssue',
        back_populates='properties',
    )


class DistributionPackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_package_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('distribution_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'DistributionPackage',
        back_populates='properties',
    )


class DistributionProperty(Base, InitPropertyMixin):
    __tablename__ = 'distribution_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('distribution.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'Distribution',
        back_populates='properties',
    )


class Product(Base):
    __tablename__ = 'product'

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    version = Column(String(255))
    vendor = Column(String(255))
    date_modified = Column(DateTime())

    packages = relationship(
        'ProductPackage',
        back_populates='product',
        collection_class=set,
    )
    properties = relationship(
        'ProductProperty',
        back_populates='parent',
        collection_class=set,
    )


class ProductBinaryPackage(Base):
    __tablename__ = 'product_binary_package'

    id = Column(Integer, primary_key=True)
    product_package_id = Column(Integer,
                                ForeignKey('product_package.id'))
    name = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('product_package_id', 'name'), )
    )

    product_package = relationship(
        'ProductPackage',
        back_populates='binary_packages',
    )


class ProductPackage(Base):
    __tablename__ = 'product_package'

    # Use uuid for 'id' here because:
    # * sqlalchemy doesn't autoincrement this field if it's
    #   not a primary key
    # * sqlalchemy seems to pass 'id' field when creating a record
    #   and I have no idea why (it shouldn't)
    # So uuid should give unique fields and don't bother with autoincrement.
    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    distribution_id = Column(Integer, ForeignKey('distribution.id'),
                             primary_key=True)
    product_id = Column(Integer, ForeignKey('product.id'),
                        primary_key=True)
    package_id = Column(Integer, ForeignKey('distribution_package.id'),
                        primary_key=True)
    # distribution_id = Column(Integer, ForeignKey('distribution.id'),
    #                          primary_key=True)
    # source_package_id = Column(Integer, ForeignKey('source_package.id'),
    #                            primary_key=True)
    # Version of a package included in a product, based on particular
    # distribution.
    # Example: 0.1.9-1ubuntu3-1mint3
    version = Column(String(255))
    date_modified = Column(DateTime())

    __table_args__ = (
        (UniqueConstraint('distribution_id', 'product_id', 'package_id'), )
    )

    binary_packages = relationship(
        'ProductBinaryPackage',
        back_populates='product_package',
        collection_class=set,
    )
    distribution = relationship(
        'Distribution',
        back_populates='product_packages',
    )
    distribution_package = relationship(
        'DistributionPackage',
        back_populates='product_packages',
    )
    issues = relationship(
        'ProductPackageIssue',
        back_populates='package',
        collection_class=set,
    )
    product = relationship(
        'Product',
        back_populates='packages',
    )
    properties = relationship(
        'ProductPackageProperty',
        back_populates='parent',
        collection_class=set,
    )


class ProductPackageIssue(Base):
    __tablename__ = 'product_package_issue'

    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    package_id = Column(Integer, ForeignKey('product_package.id'),
                        primary_key=True)
    issue_id = Column(Integer, ForeignKey('cve.id'),
                      primary_key=True)
    affected = Column(Boolean, default=True)
    resolved = Column(Boolean, default=False)
    status = Column(String(255))
    date_modified = Column(DateTime())

    __table_args__ = ((UniqueConstraint('package_id', 'issue_id'), ))

    issue = relationship(
        'CVE',
        back_populates='product_packages',
    )
    package = relationship(
        'ProductPackage',
        back_populates='issues',
    )
    properties = relationship(
        'ProductPackageIssueProperty',
        back_populates='parent',
        collection_class=set,
    )


class ProductPackageIssueProperty(Base, InitPropertyMixin):
    __tablename__ = 'product_package_issue_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('product_package_issue.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'ProductPackageIssue',
        back_populates='properties',
    )


class ProductPackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'product_package_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('product_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'ProductPackage',
        back_populates='properties',
    )


class ProductProperty(Base, InitPropertyMixin):
    __tablename__ = 'product_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('product.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'Product',
        back_populates='properties',
    )


class SourcePackage(Base):
    __tablename__ = 'source_package'

    id = Column(Integer, primary_key=True)
    project_id = Column(Integer, ForeignKey('source_project.id'))
    # Base version of a package, basically it's a version
    # taken from upstream source code.
    # Example: 2.5
    version = Column(String(255))
    date_modified = Column(DateTime())

    advisories = relationship(
        'Advisory',
        back_populates='source_packages',
        secondary=advisory__source_package,
        collection_class=set,
    )

    distribution_packages = relationship(
        'DistributionPackage',
        back_populates='source_package',
    )
    issues = relationship(
        'SourcePackageIssue',
        back_populates='package',
        collection_class=set,
    )
    project = relationship(
        'SourceProject',
        back_populates='source_packages',
    )
    properties = relationship(
        'SourcePackageProperty',
        back_populates='parent',
        collection_class=set,
    )


class SourcePackageIssue(Base):
    __tablename__ = 'source_package_issue'

    id = Column(String(36), default=lambda: str(uuid.uuid4()))
    package_id = Column(Integer, ForeignKey('source_package.id'),
                        primary_key=True)
    issue_id = Column(Integer, ForeignKey('cve.id'),
                      primary_key=True)
    affected = Column(Boolean, default=True)
    resolved = Column(Boolean, default=False)
    status = Column(String(255))
    date_modified = Column(DateTime())

    __table_args__ = ((UniqueConstraint('package_id', 'issue_id'), ))

    issue = relationship(
        'CVE',
        back_populates='source_packages',
    )
    package = relationship(
        'SourcePackage',
        back_populates='issues',
    )
    properties = relationship(
        'SourcePackageIssueProperty',
        back_populates='parent',
        collection_class=set,
    )


class SourcePackageIssueProperty(Base, InitPropertyMixin):
    __tablename__ = 'source_package_issue_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer,
                       ForeignKey('source_package_issue.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'SourcePackageIssue',
        back_populates='properties',
    )


class SourcePackageProperty(Base, InitPropertyMixin):
    __tablename__ = 'source_package_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('source_package.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'SourcePackage',
        back_populates='properties',
    )


class SourceProject(Base):
    __tablename__ = 'source_project'

    id = Column(String(36), primary_key=True,
                default=lambda: str(uuid.uuid4()))
    name = Column(String(255))
    type = Column(String(255), nullable=True)
    summary = Column(String(255))
    homepage = Column(String(255))
    date_modified = Column(DateTime())

    __table_args__ = (
        (UniqueConstraint('name', 'type'), )
    )

    cpes = relationship(
        'CPE',
        back_populates='projects',
        secondary=source_project__cpe,
        collection_class=set,
    )

    properties = relationship(
        'SourceProjectProperty',
        back_populates='parent',
        collection_class=set,
    )
    source_packages = relationship(
        'SourcePackage',
        back_populates='project',
    )


class SourceProjectProperty(Base, InitPropertyMixin):
    __tablename__ = 'source_project_properties'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('source_project.id'))
    name = Column(String(255))
    value = Column(String(255))

    __table_args__ = (
        (UniqueConstraint('parent_id', 'name', 'value'), )
    )

    parent = relationship(
        'SourceProject',
        back_populates='properties',
    )
